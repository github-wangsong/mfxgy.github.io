(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{446:function(n,e,t){"use strict";t.r(e);var a=t(2),s=Object(a.a)({},(function(){var n=this,e=n._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[e("h1",{attrs:{id:"一、javascript"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一、javascript"}},[n._v("#")]),n._v(" 一、javascript")]),n._v(" "),e("h2",{attrs:{id:"_1-javascript有哪些数据类型-它们的区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-javascript有哪些数据类型-它们的区别"}},[n._v("#")]),n._v(" 1. JavaScript有哪些数据类型，它们的区别？")]),n._v(" "),e("p",[n._v("JavaScript共有八种数据类型，分别是 Undefined、Null、Boolean、Number、String、Object、Symbol、BigInt。\n其中 Symbol 和 BigInt 是ES6 中新增的数据类型：")]),n._v(" "),e("p",[n._v("Symbol 代表创建后独一无二且不可变的数据类型，它主要是为了解决可能出现的全局变量冲突的问题。\nBigInt 是一种数字类型的数据，它可以表示任意精度格式的整数，使用 BigInt 可以安全地存储和操作大整数，即使这个数已经超出了 Number 能够表示的安全整数范围。")]),n._v(" "),e("p",[n._v("这些数据可以分为原始数据类型和引用数据类型：")]),n._v(" "),e("p",[n._v("栈：原始数据类型（Undefined、Null、Boolean、Number、String）\n堆：引用数据类型（对象、数组和函数）")]),n._v(" "),e("p",[n._v("两种类型的区别在于存储位置的不同：")]),n._v(" "),e("p",[n._v("原始数据类型直接存储在栈（stack）中的简单数据段，占据空间小、大小固定，属于被频繁使用数据，所以放入栈中存储；\n引用数据类型存储在堆（heap）中的对象，占据空间大、大小不固定。如果存储在栈中，将会影响程序运行的性能；引用数据类型在栈中存储了指针，该指针指向堆中该实体的起始地址。当解释器寻找引用值时，会首先检索其在栈中的地址，取得地址后从堆中获得实体。")]),n._v(" "),e("p",[n._v("堆和栈的概念存在于数据结构和操作系统内存中，在数据结构中：")]),n._v(" "),e("p",[n._v("在数据结构中，栈中数据的存取方式为先进后出。\n堆是一个优先队列，是按优先级来进行排序的，优先级可以按照大小来规定。")]),n._v(" "),e("p",[n._v("在操作系统中，内存被分为栈区和堆区：")]),n._v(" "),e("p",[n._v("栈区内存由编译器自动分配释放，存放函数的参数值，局部变量的值等。其操作方式类似于数据结构中的栈。\n堆区内存一般由开发着分配释放，若开发者不释放，程序结束时可能由垃圾回收机制回收。")]),n._v(" "),e("h2",{attrs:{id:"_2-数据类型检测的方式有哪些"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-数据类型检测的方式有哪些"}},[n._v("#")]),n._v(" 2. 数据类型检测的方式有哪些")]),n._v(" "),e("ul",[e("li",[n._v("（1）typeof")])]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("console.log(typeof 2);               // number\nconsole.log(typeof true);            // boolean\nconsole.log(typeof 'str');           // string\nconsole.log(typeof []);              // object    \nconsole.log(typeof function(){});    // function\nconsole.log(typeof {});              // object\nconsole.log(typeof undefined);       // undefined\nconsole.log(typeof null);            // object\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br")])]),e("p",[n._v("其中数组、对象、null都会被判断为object，其他判断都正确。")]),n._v(" "),e("ul",[e("li",[n._v("（2）instanceof")])]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("instanceof可以正确判断对象的类型，其内部运行机制是判断在其原型链中能否找到该类型的原型。\nconsole.log(2 instanceof Number);                    // false\nconsole.log(true instanceof Boolean);                // false \nconsole.log('str' instanceof String);                // false \n\nconsole.log([] instanceof Array);                    // true\nconsole.log(function(){} instanceof Function);       // true\nconsole.log({} instanceof Object);                   // true\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br")])]),e("p",[n._v("可以看到，instanceof只能正确判断引用数据类型，而不能判断基本数据类型。instanceof 运算符可以用来测试一个对象在其原型链中是否存在一个构造函数的 prototype 属性。")]),n._v(" "),e("ul",[e("li",[n._v("（3） constructor")])]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("console.log((2).constructor === Number); // true\nconsole.log((true).constructor === Boolean); // true\nconsole.log(('str').constructor === String); // true\nconsole.log(([]).constructor === Array); // true\nconsole.log((function() {}).constructor === Function); // true\nconsole.log(({}).constructor === Object); // true\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br")])]),e("p",[n._v("constructor有两个作用，一是判断数据的类型，二是对象实例通过 constrcutor 对象访问它的构造函数。需要注意，如果创建一个对象来改变它的原型，constructor就不能用来判断数据类型了：")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("function Fn(){};\n\nFn.prototype = new Array();\n\nvar f = new Fn();\n\nconsole.log(f.constructor===Fn);    // false\nconsole.log(f.constructor===Array); // true\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br")])]),e("ul",[e("li",[n._v("（4）Object.prototype.toString.call()\nObject.prototype.toString.call() 使用 Object 对象的原型方法 toString 来判断数据类型：")])]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("var a = Object.prototype.toString;\n\nconsole.log(a.call(2));\nconsole.log(a.call(true));\nconsole.log(a.call('str'));\nconsole.log(a.call([]));\nconsole.log(a.call(function(){}));\nconsole.log(a.call({}));\nconsole.log(a.call(undefined));\nconsole.log(a.call(null));\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br")])]),e("p",[n._v("同样是检测对象obj调用toString方法，obj.toString()的结果和Object.prototype.toString.call(obj)的结果不一样，这是为什么？\n这是因为toString是Object的原型方法，而Array、function等类型作为Object的实例，都重写了toString方法。不同的对象类型调用toString方法时，根据原型链的知识，调用的是对应的重写之后的toString方法（function类型返回内容为函数体的字符串，Array类型返回元素组成的字符串…），而不会去调用Object上原型toString方法（返回对象的具体类型），所以采用obj.toString()不能得到其对象类型，只能将obj转换为字符串类型；因此，在想要得到对象的具体类型时，应该调用Object原型上的toString方法。")]),n._v(" "),e("h2",{attrs:{id:"_3-判断数组的方式有哪些"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-判断数组的方式有哪些"}},[n._v("#")]),n._v(" 3. 判断数组的方式有哪些")]),n._v(" "),e("ul",[e("li",[n._v("通过Object.prototype.toString.call()做判断")])]),n._v(" "),e("p",[n._v("Object.prototype.toString.call(obj).slice(8,-1) === 'Array';\n复制代码")]),n._v(" "),e("ul",[e("li",[n._v("通过原型链做判断")])]),n._v(" "),e("p",[n._v("obj."),e("strong",[n._v("proto")]),n._v(" === Array.prototype;\n复制代码")]),n._v(" "),e("ul",[e("li",[n._v("通过ES6的Array.isArray()做判断")])]),n._v(" "),e("p",[n._v("Array.isArrray(obj);\n复制代码")]),n._v(" "),e("ul",[e("li",[n._v("通过instanceof做判断")])]),n._v(" "),e("p",[n._v("obj instanceof Array\n复制代码")]),n._v(" "),e("ul",[e("li",[n._v("通过Array.prototype.isPrototypeOf")])]),n._v(" "),e("p",[n._v("Array.prototype.isPrototypeOf(obj)\n复制代码")]),n._v(" "),e("h2",{attrs:{id:"_4-null和undefined区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-null和undefined区别"}},[n._v("#")]),n._v(" 4. null和undefined区别")]),n._v(" "),e("ul",[e("li",[n._v("首先 Undefined 和 Null 都是基本数据类型，这两个基本数据类型分别都只有一个值，就是 undefined 和 null。")]),n._v(" "),e("li",[n._v("undefined 代表的含义是未定义，null 代表的含义是空对象。一般变量声明了但还没有定义的时候会返回 undefined，null主要用于赋值给一些可能会返回对象的变量，作为初始化。")]),n._v(" "),e("li",[n._v("undefined 在 JavaScript 中不是一个保留字，这意味着可以使用 undefined 来作为一个变量名，但是这样的做法是非常危险的，它会影响对 undefined 值的判断。我们可以通过一些方法获得安全的 undefined 值，比如说 void 0。\n当对这两种类型使用 typeof 进行判断时，Null 类型化会返回 “object”，这是一个历史遗留的问题。当使用双等号对两种类型的值进行比较时会返回 true，使用三个等号时会返回 false。")])]),n._v(" "),e("h2",{attrs:{id:"_5-typeof-null-的结果是什么-为什么"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-typeof-null-的结果是什么-为什么"}},[n._v("#")]),n._v(" 5. typeof null 的结果是什么，为什么？")]),n._v(" "),e("p",[n._v("typeof null 的结果是Object。\n在 JavaScript 第一个版本中，所有值都存储在 32 位的单元中，每个单元包含一个小的 类型标签(1-3 bits) 以及当前要存储值的真实数据。类型标签存储在每个单元的低位中，共有五种数据类型：")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("000: object   - 当前存储的数据指向一个对象。\n  1: int      - 当前存储的数据是一个 31 位的有符号整数。\n010: double   - 当前存储的数据指向一个双精度的浮点数。\n100: string   - 当前存储的数据指向一个字符串。\n110: boolean  - 当前存储的数据是布尔值。\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br")])]),e("p",[n._v("如果最低位是 1，则类型标签标志位的长度只有一位；如果最低位是 0，则类型标签标志位的长度占三位，为存储其他四种数据类型提供了额外两个 bit 的长度。\n有两种特殊数据类型：")]),n._v(" "),e("p",[n._v("undefined的值是 (-2)30(一个超出整数范围的数字)；\nnull 的值是机器码 NULL 指针(null 指针的值全是 0)")]),n._v(" "),e("p",[n._v("那也就是说null的类型标签也是000，和Object的类型标签一样，所以会被判定为Object。")]),n._v(" "),e("h2",{attrs:{id:"_6-intanceof-操作符的实现原理及实现"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6-intanceof-操作符的实现原理及实现"}},[n._v("#")]),n._v(" 6. intanceof 操作符的实现原理及实现")]),n._v(" "),e("p",[n._v("instanceof 运算符用于判断构造函数的 prototype 属性是否出现在对象的原型链中的任何位置。")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("function myInstanceof(left, right) {\n  // 获取对象的原型\n  let proto = Object.getPrototypeOf(left)\n  // 获取构造函数的 prototype 对象\n  let prototype = right.prototype; \n\n  // 判断构造函数的 prototype 对象是否在对象的原型链上\n  while (true) {\n    if (!proto) return false;\n    if (proto === prototype) return true;\n    // 如果没有找到，就继续从其原型上找，Object.getPrototypeOf方法用来获取指定对象的原型\n    proto = Object.getPrototypeOf(proto);\n  }\n}\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br")])]),e("h2",{attrs:{id:"_7-为什么0-1-0-2-0-3-如何让其相等"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_7-为什么0-1-0-2-0-3-如何让其相等"}},[n._v("#")]),n._v(" 7. 为什么0.1+0.2 ! == 0.3，如何让其相等")]),n._v(" "),e("p",[n._v("在开发过程中遇到类似这样的问题：")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("let n1 = 0.1, n2 = 0.2\nconsole.log(n1 + n2)  // 0.30000000000000004\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br")])]),e("p",[n._v("这里得到的不是想要的结果，要想等于0.3，就要把它进行转化：")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("(n1 + n2).toFixed(2) // 注意，toFixed为四舍五入\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br")])]),e("p",[n._v("toFixed(num) 方法可把 Number 四舍五入为指定小数位数的数字。那为什么会出现这样的结果呢？\n计算机是通过二进制的方式存储数据的，所以计算机计算0.1+0.2的时候，实际上是计算的两个数的二进制的和。0.1的二进制是0.0001100110011001100...（1100循环），0.2的二进制是：0.00110011001100...（1100循环），这两个数的二进制都是无限循环的数。那JavaScript是如何处理无限循环的二进制小数呢？\n一般我们认为数字包括整数和小数，但是在 JavaScript 中只有一种数字类型：Number，它的实现遵循IEEE 754标准，使用64位固定长度来表示，也就是标准的double双精度浮点数。在二进制科学表示法中，双精度浮点数的小数部分最多只能保留52位，再加上前面的1，其实就是保留53位有效数字，剩余的需要舍去，遵从“0舍1入”的原则。\n根据这个原则，0.1和0.2的二进制数相加，再转化为十进制数就是：0.30000000000000004。\n下面看一下双精度数是如何保存的：")]),n._v(" "),e("p",[n._v("第一部分（蓝色）：用来存储符号位（sign），用来区分正负数，0表示正数，占用1位\n第二部分（绿色）：用来存储指数（exponent），占用11位\n第三部分（红色）：用来存储小数（fraction），占用52位")]),n._v(" "),e("p",[n._v("对于0.1，它的二进制为：\n0.00011001100110011001100110011001100110011001100110011001 10011...\n复制代码\n转为科学计数法（科学计数法的结果就是浮点数）：\n1.1001100110011001100110011001100110011001100110011001*2^-4\n复制代码\n可以看出0.1的符号位为0，指数位为-4，小数位为：\n1001100110011001100110011001100110011001100110011001\n复制代码\n那么问题又来了，指数位是负数，该如何保存呢？\nIEEE标准规定了一个偏移量，对于指数部分，每次都加这个偏移量进行保存，这样即使指数是负数，那么加上这个偏移量也就是正数了。由于JavaScript的数字是双精度数，这里就以双精度数为例，它的指数部分为11位，能表示的范围就是0~2047，IEEE固定双精度数的偏移量为1023。")]),n._v(" "),e("p",[n._v("当指数位不全是0也不全是1时(规格化的数值)，IEEE规定，阶码计算公式为 e-Bias。 此时e最小值是1，则1-1023= -1022，e最大值是2046，则2046-1023=1023，可以看到，这种情况下取值范围是-1022~1013。\n当指数位全部是0的时候(非规格化的数值)，IEEE规定，阶码的计算公式为1-Bias，即1-1023= -1022。\n当指数位全部是1的时候(特殊值)，IEEE规定这个浮点数可用来表示3个特殊值，分别是正无穷，负无穷，NaN。 具体的，小数位不为0的时候表示NaN；小数位为0时，当符号位s=0时表示正无穷，s=1时候表示负无穷。")]),n._v(" "),e("p",[n._v("对于上面的0.1的指数位为-4，-4+1023 = 1019 转化为二进制就是：1111111011.\n所以，0.1表示为：\n0 1111111011 1001100110011001100110011001100110011001100110011001\n复制代码\n说了这么多，是时候该最开始的问题了，如何实现0.1+0.2=0.3呢？\n对于这个问题，一个直接的解决方法就是设置一个误差范围，通常称为“机器精度”。对JavaScript来说，这个值通常为2-52，在ES6中，提供了Number.EPSILON属性，而它的值就是2-52，只要判断0.1+0.2-0.3是否小于Number.EPSILON，如果小于，就可以判断为0.1+0.2 ===0.3")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("function numberepsilon(arg1,arg2){                   \n  return Math.abs(arg1 - arg2) < Number.EPSILON;        \n}        \n\nconsole.log(numberepsilon(0.1 + 0.2, 0.3)); // true\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br")])]),e("h2",{attrs:{id:"_8-如何获取安全的-undefined-值"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_8-如何获取安全的-undefined-值"}},[n._v("#")]),n._v(" 8. 如何获取安全的 undefined 值？")]),n._v(" "),e("p",[n._v("因为 undefined 是一个标识符，所以可以被当作变量来使用和赋值，但是这样会影响 undefined 的正常判断。表达式 void ___ 没有返回值，因此返回结果是 undefined。void 并不改变表达式的结果，只是让表达式不返回值。因此可以用 void 0 来获得 undefined。")]),n._v(" "),e("h2",{attrs:{id:"_9-typeof-nan-的结果是什么"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_9-typeof-nan-的结果是什么"}},[n._v("#")]),n._v(" 9. typeof NaN 的结果是什么？")]),n._v(" "),e("p",[n._v("NaN 指“不是一个数字”（not a number），NaN 是一个“警戒值”（sentinel value，有特殊用途的常规值），用于指出数字类型中的错误情况，即“执行数学运算没有成功，这是失败后返回的结果”。")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('typeof NaN; // "number"\n')])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br")])]),e("p",[n._v("NaN 是一个特殊值，它和自身不相等，是唯一一个非自反（自反，reflexive，即 x === x 不成立）的值。而 NaN !== NaN 为 true。")]),n._v(" "),e("h2",{attrs:{id:"_10-isnan-和-number-isnan-函数的区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_10-isnan-和-number-isnan-函数的区别"}},[n._v("#")]),n._v(" 10. isNaN 和 Number.isNaN 函数的区别？")]),n._v(" "),e("ul",[e("li",[n._v("函数 isNaN 接收参数后，会尝试将这个参数转换为数值，任何不能被转换为数值的的值都会返回 true，因此非数字值传入也会返回 true ，会影响 NaN 的判断。")]),n._v(" "),e("li",[n._v("函数 Number.isNaN 会首先判断传入参数是否为数字，如果是数字再继续判断是否为 NaN ，不会进行数据类型的转换，这种方法对于 NaN 的判断更为准确。")])]),n._v(" "),e("h2",{attrs:{id:"_12-其他值到字符串的转换规则"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_12-其他值到字符串的转换规则"}},[n._v("#")]),n._v(" 12. 其他值到字符串的转换规则？")]),n._v(" "),e("ul",[e("li",[n._v('Null 和 Undefined 类型 ，null 转换为 "null"，undefined 转换为 "undefined"，')]),n._v(" "),e("li",[n._v('Boolean 类型，true 转换为 "true"，false 转换为 "false"。')]),n._v(" "),e("li",[n._v("Number 类型的值直接转换，不过那些极小和极大的数字会使用指数形式。")]),n._v(" "),e("li",[n._v("Symbol 类型的值直接转换，但是只允许显式强制类型转换，使用隐式强制类型转换会产生错误。")]),n._v(" "),e("li",[n._v('对普通对象来说，除非自行定义 toString() 方法，否则会调用 toString()（Object.prototype.toString()）来返回内部属性 [[Class]] 的值，如"[object Object]"。如果对象有自己的 toString() 方法，字符串化时就会调用该方法并使用其返回值。')])]),n._v(" "),e("h2",{attrs:{id:"_13-其他值到数字值的转换规则"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_13-其他值到数字值的转换规则"}},[n._v("#")]),n._v(" 13. 其他值到数字值的转换规则？")]),n._v(" "),e("ul",[e("li",[n._v("Undefined 类型的值转换为 NaN。")]),n._v(" "),e("li",[n._v("Null 类型的值转换为 0。")]),n._v(" "),e("li",[n._v("Boolean 类型的值，true 转换为 1，false 转换为 0。")]),n._v(" "),e("li",[n._v("String 类型的值转换如同使用 Number() 函数进行转换，如果包含非数字值则转换为 NaN，空字符串为 0。")]),n._v(" "),e("li",[n._v("Symbol 类型的值不能转换为数字，会报错。\n对象（包括数组）会首先被转换为相应的基本类型值，如果返回的是非数字的基本类型值，则再遵循以上规则将其强制转换为数字。")])]),n._v(" "),e("p",[n._v("为了将值转换为相应的基本类型值，抽象操作 ToPrimitive 会首先（通过内部操作 DefaultValue）检查该值是否有valueOf()方法。如果有并且返回基本类型值，就使用该值进行强制类型转换。如果没有就使用 toString() 的返回值（如果存在）来进行强制类型转换。\n如果 valueOf() 和 toString() 均不返回基本类型值，会产生 TypeError 错误。")]),n._v(" "),e("h2",{attrs:{id:"_14-其他值到布尔类型的值的转换规则"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_14-其他值到布尔类型的值的转换规则"}},[n._v("#")]),n._v(" 14. 其他值到布尔类型的值的转换规则？")]),n._v(" "),e("p",[n._v('以下这些是假值：\n• undefined\n• null\n• false\n• +0、-0 和 NaN\n• ""\n假值的布尔强制类型转换结果为 false。从逻辑上说，假值列表以外的都应该是真值。')]),n._v(" "),e("h2",{attrs:{id:"_15-和-操作符的返回值"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_15-和-操作符的返回值"}},[n._v("#")]),n._v(" 15. || 和 && 操作符的返回值？")]),n._v(" "),e("p",[n._v("|| 和 && 首先会对第一个操作数执行条件判断，如果其不是布尔值就先强制转换为布尔类型，然后再执行条件判断。")]),n._v(" "),e("p",[n._v("对于 || 来说，如果条件判断结果为 true 就返回第一个操作数的值，如果为 false 就返回第二个操作数的值。\n&& 则相反，如果条件判断结果为 true 就返回第二个操作数的值，如果为 false 就返回第一个操作数的值。")]),n._v(" "),e("p",[n._v("|| 和 && 返回它们其中一个操作数的值，而非条件判断的结果")]),n._v(" "),e("h2",{attrs:{id:"_16-object-is-与比较操作符-、-的区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_16-object-is-与比较操作符-、-的区别"}},[n._v("#")]),n._v(" 16. Object.is() 与比较操作符 “===”、“==” 的区别？")]),n._v(" "),e("p",[n._v("使用双等号（==）进行相等判断时，如果两边的类型不一致，则会进行强制类型转化后再进行比较。\n使用三等号（===）进行相等判断时，如果两边的类型不一致时，不会做强制类型准换，直接返回 false。\n使用 Object.is 来进行相等判断时，一般情况下和三等号的判断相同，它处理了一些特殊的情况，比如 -0 和 +0 不再相等，两个 NaN 是相等的。")]),n._v(" "),e("h2",{attrs:{id:"_17-什么是-javascript-中的包装类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_17-什么是-javascript-中的包装类型"}},[n._v("#")]),n._v(" 17. 什么是 JavaScript 中的包装类型？")]),n._v(" "),e("p",[n._v("在 JavaScript 中，基本类型是没有属性和方法的，但是为了便于操作基本类型的值，在调用基本类型的属性或方法时 JavaScript 会在后台隐式地将基本类型的值转换为对象，如：")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('const a = "abc";\na.length; // 3\na.toUpperCase(); // "ABC"\n')])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br")])]),e("p",[n._v("在访问'abc'.length时，JavaScript 将'abc'在后台转换成String('abc')，然后再访问其length属性。\nJavaScript也可以使用Object函数显式地将基本类型转换为包装类型：")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("var a = 'abc'\nObject(a) // String {\"abc\"}\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br")])]),e("p",[n._v("也可以使用valueOf方法将包装类型倒转成基本类型：")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("var a = 'abc'\nvar b = Object(a)\nvar c = b.valueOf() // 'abc'\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br")])]),e("p",[n._v("看看如下代码会打印出什么：")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('var a = new Boolean( false );\nif (!a) {\n  console.log( "Oops" ); // never runs\n}\n')])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br")])]),e("p",[n._v("答案是什么都不会打印，因为虽然包裹的基本类型是false，但是false被包裹成包装类型后就成了对象，所以其非值为false，所以循环体中的内容不会运行。")]),n._v(" "),e("h1",{attrs:{id:"_18-javascript-中如何进行隐式类型转换"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_18-javascript-中如何进行隐式类型转换"}},[n._v("#")]),n._v(" 18. JavaScript 中如何进行隐式类型转换？")]),n._v(" "),e("p",[n._v("首先要介绍ToPrimitive方法，这是 JavaScript 中每个值隐含的自带的方法，用来将值 （无论是基本类型值还是对象）转换为基本类型值。如果值为基本类型，则直接返回值本身；如果值为对象，其看起来大概是这样：")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("/**\n* @obj 需要转换的对象\n* @type 期望的结果类型\n*/\nToPrimitive(obj,type)\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br")])]),e("p",[n._v("type的值为number或者string。\n（1）当type为number时规则如下：")]),n._v(" "),e("p",[n._v("调用obj的valueOf方法，如果为原始值，则返回，否则下一步；\n调用obj的toString方法，后续同上；\n抛出TypeError 异常。")]),n._v(" "),e("p",[n._v("（2）当type为string时规则如下：")]),n._v(" "),e("p",[n._v("调用obj的toString方法，如果为原始值，则返回，否则下一步；\n调用obj的valueOf方法，后续同上；\n抛出TypeError 异常。")]),n._v(" "),e("p",[n._v("可以看出两者的主要区别在于调用toString和valueOf的先后顺序。默认情况下：")]),n._v(" "),e("p",[n._v("如果对象为 Date 对象，则type默认为string；\n其他情况下，type默认为number。")]),n._v(" "),e("p",[n._v("总结上面的规则，对于 Date 以外的对象，转换为基本类型的大概规则可以概括为一个函数：")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("var objToNumber = value => Number(value.valueOf().toString())\nobjToNumber([]) === 0\nobjToNumber({}) === NaN\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br")])]),e("p",[n._v("而 JavaScript 中的隐式类型转换主要发生在+、-、*、/以及==、>、<这些运算符之间。而这些运算符只能操作基本类型值，所以在进行这些运算前的第一步就是将两边的值用ToPrimitive转换成基本类型，再进行操作。\n以下是基本类型的值在不同操作符的情况下隐式转换的规则 （对于对象，其会被ToPrimitive转换成基本类型，所以最终还是要应用基本类型转换规则）：")]),n._v(" "),e("p",[n._v("+操作符\n+操作符的两边有至少一个string类型变量时，两边的变量都会被隐式转换为字符串；其他情况下两边的变量都会被转换为数字。")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("1 + '23' // '123'\n1 + false // 1 \n1 + Symbol() // Uncaught TypeError: Cannot convert a Symbol value to a number\n'1' + false // '1false'\nfalse + true // 1\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br")])]),e("p",[n._v("-、*、\\操作符")]),n._v(" "),e("p",[n._v("NaN也是一个数字")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("1 * '23' // 23\n1 * false // 0\n1 / 'aa' // NaN\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br")])]),e("p",[n._v("对于==操作符")]),n._v(" "),e("p",[n._v("操作符两边的值都尽量转成number：")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("3 == true // false, 3 转为number为3，true转为number为1\n'0' == false //true, '0'转为number为0，false转为number为0\n'0' == 0 // '0'转为number为0\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br")])]),e("p",[n._v("对于<和>比较符")]),n._v(" "),e("p",[n._v("如果两边都是字符串，则比较字母表顺序：")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("'ca' < 'bd' // false\n'a' < 'b' // true\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br")])]),e("p",[n._v("其他情况下，转换为数字再比较：")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("'12' < 13 // true\nfalse > -1 // true\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br")])]),e("p",[n._v("以上说的是基本类型的隐式转换，而对象会被ToPrimitive转换为基本类型再进行转换：")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("var a = {}\na > 2 // false\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br")])]),e("p",[n._v("其对比过程如下：")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('a.valueOf() // {}, 上面提到过，ToPrimitive默认type为number，所以先valueOf，结果还是个对象，下一步\na.toString() // "[object Object]"，现在是一个字符串了\nNumber(a.toString()) // NaN，根据上面 < 和 > 操作符的规则，要转换成数字\nNaN > 2 //false，得出比较结果\n')])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br")])]),e("p",[n._v("又比如：")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("var a = {name:'Jack'}\nvar b = {age: 18}\na + b // \"[object Object][object Object]\"\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br")])]),e("p",[n._v("运算过程如下：")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('a.valueOf() // {}，上面提到过，ToPrimitive默认type为number，所以先valueOf，结果还是个对象，下一步\na.toString() // "[object Object]"\nb.valueOf() // 同理\nb.toString() // "[object Object]"\na + b // "[object Object][object Object]"\n')])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br")])]),e("h2",{attrs:{id:"_19-操作符什么时候用于字符串的拼接"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_19-操作符什么时候用于字符串的拼接"}},[n._v("#")]),n._v(" 19. '+' 操作符什么时候用于字符串的拼接？")]),n._v(" "),e("p",[n._v("根据 ES5 规范，如果某个操作数是字符串或者能够通过以下步骤转换为字符串的话，+ 将进行拼接操作。如果其中一个操作数是对象（包括数组），则首先对其调用 ToPrimitive 抽象操作，该抽象操作再调用 "),e("code",[n._v("[[DefaultValue]]")]),n._v("，以数字作为上下文。如果不能转换为字符串，则会将其转换为数字类型来进行计算。\n简单来说就是，如果 + 的其中一个操作数是字符串（或者通过以上步骤最终得到字符串），则执行字符串拼接，否则执行数字加法。\n那么对于除了加法的运算符来说，只要其中一方是数字，那么另一方就会被转为数字。")]),n._v(" "),e("h2",{attrs:{id:"_20-为什么会有bigint的提案"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_20-为什么会有bigint的提案"}},[n._v("#")]),n._v(" 20. 为什么会有BigInt的提案？")]),n._v(" "),e("p",[n._v("JavaScript中Number.MAX_SAFE_INTEGER表示最⼤安全数字，计算结果是9007199254740991，即在这个数范围内不会出现精度丢失（⼩数除外）。但是⼀旦超过这个范围，js就会出现计算不准确的情况，这在⼤数计算的时候不得不依靠⼀些第三⽅库进⾏解决，因此官⽅提出了BigInt来解决此问题。")]),n._v(" "),e("h2",{attrs:{id:"_21-object-assign和扩展运算法是深拷贝还是浅拷贝-两者区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_21-object-assign和扩展运算法是深拷贝还是浅拷贝-两者区别"}},[n._v("#")]),n._v(" 21. object.assign和扩展运算法是深拷贝还是浅拷贝，两者区别")]),n._v(" "),e("p",[n._v("扩展运算符：")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("let outObj = {\n  inObj: {a: 1, b: 2}\n}\nlet newObj = {...outObj}\nnewObj.inObj.a = 2\nconsole.log(outObj) // {inObj: {a: 2, b: 2}}\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br")])]),e("p",[n._v("Object.assign():")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("let outObj = {\n  inObj: {a: 1, b: 2}\n}\nlet newObj = Object.assign({}, outObj)\nnewObj.inObj.a = 2\nconsole.log(outObj) // {inObj: {a: 2, b: 2}}\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br")])]),e("p",[n._v("可以看到，两者都是浅拷贝。")]),n._v(" "),e("p",[n._v("Object.assign()方法接收的第一个参数作为目标对象，后面的所有参数作为源对象。然后把所有的源对象合并到目标对象中。它会修改了一个对象，因此会触发 ES6 setter。\n扩展操作符（…）使用它时，数组或对象中的每一个值都会被拷贝到一个新的数组或对象中。它不复制继承的属性或类的属性，但是它会复制ES6的 symbols 属性。")]),n._v(" "),e("h1",{attrs:{id:"二、es6"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#二、es6"}},[n._v("#")]),n._v(" 二、ES6")]),n._v(" "),e("h2",{attrs:{id:"_1-let、const、var的区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-let、const、var的区别"}},[n._v("#")]),n._v(" 1. let、const、var的区别")]),n._v(" "),e("p",[n._v("（1）块级作用域： 块作用域由 { }包括，let和const具有块级作用域，var不存在块级作用域。块级作用域解决了ES5中的两个问题：")]),n._v(" "),e("p",[n._v("内层变量可能覆盖外层变量\n用来计数的循环变量泄露为全局变量")]),n._v(" "),e("p",[n._v("（2）变量提升： var存在变量提升，let和const不存在变量提升，即在变量只能在声明之后使用，否在会报错。\n（3）给全局添加属性： 浏览器的全局对象是window，Node的全局对象是global。var声明的变量为全局变量，并且会将该变量添加为全局对象的属性，但是let和const不会。\n（4）重复声明： var声明变量时，可以重复声明变量，后声明的同名变量会覆盖之前声明的遍历。const和let不允许重复声明变量。\n（5）暂时性死区： 在使用let、const命令声明变量之前，该变量都是不可用的。这在语法上，称为暂时性死区。使用var声明的变量不存在暂时性死区。\n（6）初始值设置： 在变量声明时，var 和 let 可以不用设置初始值。而const声明变量必须设置初始值。\n（7）指针指向： let和const都是ES6新增的用于创建变量的语法。 let创建的变量是可以更改指针指向（可以重新赋值）。但const声明的变量是不允许改变指针的指向。")]),n._v(" "),e("p",[n._v("区别varletconst是否有块级作用域×✔️✔️是否存在变量提升✔️××是否添加全局属性✔️××能否重复声明变量✔️××是否存在暂时性死区×✔️✔️是否必须设置初始值××✔️能否改变指针指向✔️✔️×")]),n._v(" "),e("h2",{attrs:{id:"_2-const对象的属性可以修改吗"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-const对象的属性可以修改吗"}},[n._v("#")]),n._v(" 2. const对象的属性可以修改吗")]),n._v(" "),e("p",[n._v("const保证的并不是变量的值不能改动，而是变量指向的那个内存地址不能改动。对于基本类型的数据（数值、字符串、布尔值），其值就保存在变量指向的那个内存地址，因此等同于常量。\n但对于引用类型的数据（主要是对象和数组）来说，变量指向数据的内存地址，保存的只是一个指针，const只能保证这个指针是固定不变的，至于它指向的数据结构是不是可变的，就完全不能控制了。")]),n._v(" "),e("h2",{attrs:{id:"_3-如果new一个箭头函数的会怎么样"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-如果new一个箭头函数的会怎么样"}},[n._v("#")]),n._v(" 3. 如果new一个箭头函数的会怎么样")]),n._v(" "),e("p",[n._v("箭头函数是ES6中的提出来的，它没有prototype，也没有自己的this指向，更不可以使用arguments参数，所以不能New一个箭头函数。\nnew操作符的实现步骤如下：")]),n._v(" "),e("p",[n._v("创建一个对象\n将构造函数的作用域赋给新对象（也就是将对象的__proto__属性指向构造函数的prototype属性）\n指向构造函数中的代码，构造函数中的this指向该对象（也就是为这个对象添加属性和方法）\n返回新的对象")]),n._v(" "),e("p",[n._v("所以，上面的第二、三步，箭头函数都是没有办法执行的。")]),n._v(" "),e("h2",{attrs:{id:"_4-箭头函数与普通函数的区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-箭头函数与普通函数的区别"}},[n._v("#")]),n._v(" 4. 箭头函数与普通函数的区别")]),n._v(" "),e("p",[n._v("（1）箭头函数比普通函数更加简洁")]),n._v(" "),e("p",[n._v("如果没有参数，就直接写一个空括号即可\n如果只有一个参数，可以省去参数的括号\n如果有多个参数，用逗号分割\n如果函数体的返回值只有一句，可以省略大括号\n如果函数体不需要返回值，且只有一句话，可以给这个语句前面加一个void关键字。最常见的就是调用一个函数：")]),n._v(" "),e("p",[n._v("let fn = () => void doesNotReturn();\n复制代码\n（2）箭头函数没有自己的this\n箭头函数不会创建自己的this， 所以它没有自己的this，它只会在自己作用域的上一层继承this。所以箭头函数中this的指向在它在定义时已经确定了，之后不会改变。\n（3）箭头函数继承来的this指向永远不会改变\nvar id = 'GLOBAL';\nvar obj = {\nid: 'OBJ',\na: function(){\nconsole.log(this.id);\n},\nb: () => {\nconsole.log(this.id);\n}\n};\nobj.a();    // 'OBJ'\nobj.b();    // 'GLOBAL'\nnew obj.a()  // undefined\nnew obj.b()  // Uncaught TypeError: obj.b is not a constructor\n复制代码\n对象obj的方法b是使用箭头函数定义的，这个函数中的this就永远指向它定义时所处的全局执行环境中的this，即便这个函数是作为对象obj的方法调用，this依旧指向Window对象。需要注意，定义对象的大括号{}是无法形成一个单独的执行环境的，它依旧是处于全局执行环境中。\n（4）call()、apply()、bind()等方法不能改变箭头函数中this的指向\nvar id = 'Global';\nlet fun1 = () => {\nconsole.log(this.id)\n};\nfun1();                     // 'Global'\nfun1.call({id: 'Obj'});     // 'Global'\nfun1.apply({id: 'Obj'});    // 'Global'\nfun1.bind({id: 'Obj'})();   // 'Global'\n复制代码\n（5）箭头函数不能作为构造函数使用\n构造函数在new的步骤在上面已经说过了，实际上第二步就是将函数中的this指向该对象。 但是由于箭头函数时没有自己的this的，且this指向外层的执行环境，且不能改变指向，所以不能当做构造函数使用。\n（6）箭头函数没有自己的arguments\n箭头函数没有自己的arguments对象。在箭头函数中访问arguments实际上获得的是它外层函数的arguments值。\n（7）箭头函数没有prototype\n（8）箭头函数不能用作Generator函数，不能使用yeild关键字")]),n._v(" "),e("h2",{attrs:{id:"_5-箭头函数的this指向哪里"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-箭头函数的this指向哪里"}},[n._v("#")]),n._v(" 5. 箭头函数的this指向哪⾥？")]),n._v(" "),e("p",[n._v("箭头函数不同于传统JavaScript中的函数，箭头函数并没有属于⾃⼰的this，它所谓的this是捕获其所在上下⽂的 this 值，作为⾃⼰的 this 值，并且由于没有属于⾃⼰的this，所以是不会被new调⽤的，这个所谓的this也不会被改变。\n可以⽤Babel理解⼀下箭头函数:\n// ES6\nconst obj = {\ngetArrow() {\nreturn () => {\nconsole.log(this === obj);\n};\n}\n}\n复制代码\n转化后：\n// ES5，由 Babel 转译\nvar obj = {\ngetArrow: function getArrow() {\nvar _this = this;\nreturn function () {\nconsole.log(_this === obj);\n};\n}\n};\n复制代码")]),n._v(" "),e("h2",{attrs:{id:"_6-扩展运算符的作用及使用场景"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6-扩展运算符的作用及使用场景"}},[n._v("#")]),n._v(" 6. 扩展运算符的作用及使用场景")]),n._v(" "),e("p",[n._v("（1）对象扩展运算符\n对象的扩展运算符(...)用于取出参数对象中的所有可遍历属性，拷贝到当前对象之中。\nlet bar = { a: 1, b: 2 };\nlet baz = { ...bar }; // { a: 1, b: 2 }\n复制代码\n上述方法实际上等价于:\nlet bar = { a: 1, b: 2 };\nlet baz = Object.assign({}, bar); // { a: 1, b: 2 }\n复制代码\nObject.assign方法用于对象的合并，将源对象（source）的所有可枚举属性，复制到目标对象（target）。Object.assign方法的第一个参数是目标对象，后面的参数都是源对象。(如果目标对象与源对象有同名属性，或多个源对象有同名属性，则后面的属性会覆盖前面的属性)。\n同样，如果用户自定义的属性，放在扩展运算符后面，则扩展运算符内部的同名属性会被覆盖掉。\nlet bar = {a: 1, b: 2};\nlet baz = {...bar, ...{a:2, b: 4}};  // {a: 2, b: 4}\n复制代码\n利用上述特性就可以很方便的修改对象的部分属性。在redux中的reducer函数规定必须是一个纯函数，reducer中的state对象要求不能直接修改，可以通过扩展运算符把修改路径的对象都复制一遍，然后产生一个新的对象返回。\n需要注意：扩展运算符对对象实例的拷贝属于浅拷贝。\n（2）数组扩展运算符\n数组的扩展运算符可以将一个数组转为用逗号分隔的参数序列，且每次只能展开一层数组。\nconsole.log(...[1, 2, 3])\n// 1 2 3\nconsole.log(...[1, [2, 3, 4], 5])\n// 1 [2, 3, 4] 5\n复制代码\n下面是数组的扩展运算符的应用：")]),n._v(" "),e("p",[n._v("将数组转换为参数序列")]),n._v(" "),e("p",[n._v("function add(x, y) {\nreturn x + y;\n}\nconst numbers = [1, 2];\nadd(...numbers) // 3\n复制代码")]),n._v(" "),e("p",[n._v("复制数组")]),n._v(" "),e("p",[n._v("const arr1 = [1, 2];\nconst arr2 = [...arr1];\n复制代码\n要记住：扩展运算符(…)用于取出参数对象中的所有可遍历属性，拷贝到当前对象之中，这里参数对象是个数组，数组里面的所有对象都是基础数据类型，将所有基础数据类型重新拷贝到新的数组中。")]),n._v(" "),e("p",[n._v("合并数组")]),n._v(" "),e("p",[n._v("如果想在数组内合并数组，可以这样：\nconst arr1 = ['two', 'three'];const arr2 = ['one', ...arr1, 'four', 'five'];// [\"one\", \"two\", \"three\", \"four\", \"five\"]\n复制代码")]),n._v(" "),e("p",[n._v("扩展运算符与解构赋值结合起来，用于生成数组")]),n._v(" "),e("p",[n._v("const [first, ...rest] = [1, 2, 3, 4, 5];first // 1rest  // [2, 3, 4, 5]\n复制代码\n需要注意：如果将扩展运算符用于数组赋值，只能放在参数的最后一位，否则会报错。\nconst [...rest, last] = [1, 2, 3, 4, 5];         // 报错const [first, ...rest, last] = [1, 2, 3, 4, 5];  // 报错\n复制代码")]),n._v(" "),e("p",[n._v("将字符串转为真正的数组")]),n._v(" "),e("p",[n._v('[...\'hello\']    // [ "h", "e", "l", "l", "o" ]\n复制代码')]),n._v(" "),e("p",[n._v("任何 Iterator 接口的对象，都可以用扩展运算符转为真正的数组")]),n._v(" "),e("p",[n._v("比较常见的应用是可以将某些数据结构转为数组：\n// arguments对象\nfunction foo() {\nconst args = [...arguments];\n}\n复制代码\n用于替换es5中的Array.prototype.slice.call(arguments)写法。")]),n._v(" "),e("p",[n._v("使用Math函数获取数组中特定的值")]),n._v(" "),e("p",[n._v("const numbers = [9, 4, 7, 1];\nMath.min(...numbers); // 1\nMath.max(...numbers); // 9\n复制代码")]),n._v(" "),e("h2",{attrs:{id:"_8-对对象与数组的解构的理解"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_8-对对象与数组的解构的理解"}},[n._v("#")]),n._v(" 8. 对对象与数组的解构的理解")]),n._v(" "),e("p",[n._v("解构是 ES6 提供的一种新的提取数据的模式，这种模式能够从对象或数组里有针对性地拿到想要的数值。\n1）数组的解构\n在解构数组时，以元素的位置为匹配条件来提取想要的数据的：\nconst [a, b, c] = [1, 2, 3]\n复制代码\n最终，a、b、c分别被赋予了数组第0、1、2个索引位的值：")]),n._v(" "),e("p",[n._v("数组里的0、1、2索引位的元素值，精准地被映射到了左侧的第0、1、2个变量里去，这就是数组解构的工作模式。还可以通过给左侧变量数组设置空占位的方式，实现对数组中某几个元素的精准提取：\nconst [a,,c] = [1,2,3]\n复制代码\n通过把中间位留空，可以顺利地把数组第一位和最后一位的值赋给 a、c 两个变量：")]),n._v(" "),e("p",[n._v("2）对象的解构\n对象解构比数组结构稍微复杂一些，也更显强大。在解构对象时，是以属性的名称为匹配条件，来提取想要的数据的。现在定义一个对象：\nconst stu = {\nname: 'Bob',\nage: 24\n}\n复制代码\n假如想要解构它的两个自有属性，可以这样：\nconst { name, age } = stu\n复制代码\n这样就得到了 name 和 age 两个和 stu 平级的变量：")]),n._v(" "),e("p",[n._v("注意，对象解构严格以属性名作为定位依据，所以就算调换了 name 和 age 的位置，结果也是一样的：\nconst { age, name } = stu\n复制代码")]),n._v(" "),e("h2",{attrs:{id:"_9-如何提取高度嵌套的对象里的指定属性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_9-如何提取高度嵌套的对象里的指定属性"}},[n._v("#")]),n._v(" 9. 如何提取高度嵌套的对象里的指定属性？")]),n._v(" "),e("p",[n._v("有时会遇到一些嵌套程度非常深的对象：\nconst school = {\nclasses: {\nstu: {\nname: 'Bob',\nage: 24,\n}\n}\n}\n复制代码\n像此处的 name 这个变量，嵌套了四层，此时如果仍然尝试老方法来提取它：\nconst { name } = school\n复制代码\n显然是不奏效的，因为 school 这个对象本身是没有 name 这个属性的，name 位于 school 对象的“儿子的儿子”对象里面。要想把 name 提取出来，一种比较笨的方法是逐层解构：\nconst { classes } = school\nconst { stu } = classes\nconst { name } = stu\nname // 'Bob'\n复制代码\n但是还有一种更标准的做法，可以用一行代码来解决这个问题：\nconst { classes: { stu: { name } }} = school")]),n._v(" "),e("p",[n._v("console.log(name)  // 'Bob'\n复制代码\n可以在解构出来的变量名右侧，通过冒号+{目标属性名}这种形式，进一步解构它，一直解构到拿到目标数据为止。")]),n._v(" "),e("h2",{attrs:{id:"_10-对-rest-参数的理解"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_10-对-rest-参数的理解"}},[n._v("#")]),n._v(" 10. 对 rest 参数的理解")]),n._v(" "),e("p",[n._v("扩展运算符被用在函数形参上时，它还可以把一个分离的参数序列整合成一个数组：\nfunction mutiple(...args) {\nlet result = 1;\nfor (var val of args) {\nresult *= val;\n}\nreturn result;\n}\nmutiple(1, 2, 3, 4) // 24\n复制代码\n这里，传入 mutiple 的是四个分离的参数，但是如果在 mutiple 函数里尝试输出 args 的值，会发现它是一个数组：\nfunction mutiple(...args) {\nconsole.log(args)\n}\nmutiple(1, 2, 3, 4) // [1, 2, 3, 4]\n复制代码\n这就是 … rest运算符的又一层威力了，它可以把函数的多个入参收敛进一个数组里。这一点经常用于获取函数的多余参数，或者像上面这样处理函数参数个数不确定的情况。")]),n._v(" "),e("h2",{attrs:{id:"_11-es6中模板语法与字符串处理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_11-es6中模板语法与字符串处理"}},[n._v("#")]),n._v(" 11. ES6中模板语法与字符串处理")]),n._v(" "),e("p",[n._v("ES6 提出了“模板语法”的概念。在 ES6 以前，拼接字符串是很麻烦的事情：\nvar name = 'css'"),e("br"),n._v("\nvar career = 'coder'\nvar hobby = ['coding', 'writing']\nvar finalString = 'my name is ' + name + ', I work as a ' + career + ', I love ' + hobby[0] + ' and ' + hobby[1]\n复制代码\n仅仅几个变量，写了这么多加号，还要时刻小心里面的空格和标点符号有没有跟错地方。但是有了模板字符串，拼接难度直线下降：\nvar name = 'css'"),e("br"),n._v("\nvar career = 'coder'\nvar hobby = ['coding', 'writing']\nvar finalString = "),e("code",[n._v("my name is ${name}, I work as a ${career} I love ${hobby[0]} and ${hobby[1]}")]),n._v("\n复制代码\n字符串不仅更容易拼了，也更易读了，代码整体的质量都变高了。这就是模板字符串的第一个优势——允许用${}的方式嵌入变量。但这还不是问题的关键，模板字符串的关键优势有两个：")]),n._v(" "),e("p",[n._v("在模板字符串中，空格、缩进、换行都会被保留\n模板字符串完全支持“运算”式的表达式，可以在${}里完成一些计算")]),n._v(" "),e("p",[n._v("基于第一点，可以在模板字符串里无障碍地直接写 html 代码：\nlet list = "),e("code",[n._v("<ul> \t\t<li>列表项1</li> \t\t<li>列表项2</li> \t</ul>")]),n._v(";\nconsole.log(message); // 正确输出，不存在报错\n复制代码\n基于第二点，可以把一些简单的计算和调用丢进 ${} 来做：\nfunction add(a, b) {\nconst finalString = "),e("code",[n._v("${a} + ${b} = ${a+b}")]),n._v("\nconsole.log(finalString)\n}\nadd(1, 2) // 输出 '1 + 2 = 3'\n复制代码\n除了模板语法外， ES6中还新增了一系列的字符串方法用于提升开发效率：\n（1）存在性判定：在过去，当判断一个字符/字符串是否在某字符串中时，只能用 indexOf > -1 来做。现在 ES6 提供了三个方法：includes、startsWith、endsWith，它们都会返回一个布尔值来告诉你是否存在。")]),n._v(" "),e("p",[n._v("includes：判断字符串与子串的包含关系：")]),n._v(" "),e("p",[n._v("const son = 'haha'\nconst father = 'xixi haha hehe'\nfather.includes(son) // true\n复制代码")]),n._v(" "),e("p",[n._v("startsWith：判断字符串是否以某个/某串字符开头：")]),n._v(" "),e("p",[n._v("const father = 'xixi haha hehe'\nfather.startsWith('haha') // false\nfather.startsWith('xixi') // true\n复制代码")]),n._v(" "),e("p",[n._v("endsWith：判断字符串是否以某个/某串字符结尾：")]),n._v(" "),e("p",[n._v("const father = 'xixi haha hehe'\nfather.endsWith('hehe') // true\n复制代码\n（2）自动重复：可以使用 repeat 方法来使同一个字符串输出多次（被连续复制多次）：\nconst sourceCode = 'repeat for 3 times;'\nconst repeated = sourceCode.repeat(3)\nconsole.log(repeated) // repeat for 3 times;repeat for 3 times;repeat for 3 times;\n复制代码")]),n._v(" "),e("h1",{attrs:{id:"三、javascript基础"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#三、javascript基础"}},[n._v("#")]),n._v(" 三、JavaScript基础")]),n._v(" "),e("h2",{attrs:{id:"_1-new操作符的实现原理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-new操作符的实现原理"}},[n._v("#")]),n._v(" 1. new操作符的实现原理")]),n._v(" "),e("p",[n._v('new操作符的执行过程：\n（1）首先创建了一个新的空对象\n（2）设置原型，将对象的原型设置为函数的 prototype 对象。\n（3）让函数的 this 指向这个对象，执行构造函数的代码（为这个新对象添加属性）\n（4）判断函数的返回值类型，如果是值类型，返回创建的对象。如果是引用类型，就返回这个引用类型的对象。\n具体实现：\nfunction objectFactory() {\nlet newObject = null;\nlet constructor = Array.prototype.shift.call(arguments);\nlet result = null;\n// 判断参数是否是一个函数\nif (typeof constructor !== "function") {\nconsole.error("type error");\nreturn;\n}\n// 新建一个空对象，对象的原型为构造函数的 prototype 对象\nnewObject = Object.create(constructor.prototype);\n// 将 this 指向新建对象，并执行函数\nresult = constructor.apply(newObject, arguments);\n// 判断返回对象\nlet flag = result && (typeof result === "object" || typeof result === "function");\n// 判断返回结果\nreturn flag ? result : newObject;\n}\n// 使用方法\nobjectFactory(构造函数, 初始化参数);\n复制代码')]),n._v(" "),e("h2",{attrs:{id:"_2-map和object的区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-map和object的区别"}},[n._v("#")]),n._v(" 2. map和Object的区别")]),n._v(" "),e("p",[n._v("MapObject意外的键Map默认情况不包含任何键，只包含显式插入的键。Object 有一个原型, 原型链上的键名有可能和自己在对象上的设置的键名产生冲突。键的类型Map的键可以是任意值，包括函数、对象或任意基本类型。Object 的键必须是 String 或是Symbol。键的顺序Map 中的 key 是有序的。因此，当迭代的时候， Map 对象以插入的顺序返回键值。Object 的键是无序的SizeMap 的键值对个数可以轻易地通过size 属性获取Object 的键值对个数只能手动计算迭代Map 是 iterable 的，所以可以直接被迭代。迭代Object需要以某种方式获取它的键然后才能迭代。性能在频繁增删键值对的场景下表现更好。在频繁添加和删除键值对的场景下未作出优化。")]),n._v(" "),e("h2",{attrs:{id:"_3-map和weakmap的区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-map和weakmap的区别"}},[n._v("#")]),n._v(" 3. map和weakMap的区别")]),n._v(" "),e("p",[n._v('（1）Map\nmap本质上就是键值对的集合，但是普通的Object中的键值对中的键只能是字符串。而ES6提供的Map数据结构类似于对象，但是它的键不限制范围，可以是任意类型，是一种更加完善的Hash结构。如果Map的键是一个原始数据类型，只要两个键严格相同，就视为是同一个键。\n实际上Map是一个数组，它的每一个数据也都是一个数组，其形式如下：\nconst map = [\n["name","张三"],\n["age",18],\n]\n复制代码\nMap数据结构有以下操作方法：')]),n._v(" "),e("p",[n._v("size： map.size 返回Map结构的成员总数。\nset(key,value)：设置键名key对应的键值value，然后返回整个Map结构，如果key已经有值，则键值会被更新，否则就新生成该键。（因为返回的是当前Map对象，所以可以链式调用）\nget(key)：该方法读取key对应的键值，如果找不到key，返回undefined。\nhas(key)：该方法返回一个布尔值，表示某个键是否在当前Map对象中。\ndelete(key)：该方法删除某个键，返回true，如果删除失败，返回false。\nclear()：map.clear()清除所有成员，没有返回值。")]),n._v(" "),e("p",[n._v("Map结构原生提供是三个遍历器生成函数和一个遍历方法")]),n._v(" "),e("p",[n._v("keys()：返回键名的遍历器。\nvalues()：返回键值的遍历器。\nentries()：返回所有成员的遍历器。\nforEach()：遍历Map的所有成员。")]),n._v(" "),e("p",[n._v('const map = new Map([\n["foo",1],\n["bar",2],\n])\nfor(let key of map.keys()){\nconsole.log(key);  // foo bar\n}\nfor(let value of map.values()){\nconsole.log(value); // 1 2\n}\nfor(let items of map.entries()){\nconsole.log(items);  // ["foo",1]  ["bar",2]\n}\nmap.forEach( (value,key,map) => {\nconsole.log(key,value); // foo 1    bar 2\n})\n复制代码\n（2）WeakMap\nWeakMap 对象也是一组键值对的集合，其中的键是弱引用的。其键必须是对象，原始数据类型不能作为key值，而值可以是任意的。\n该对象也有以下几种方法：')]),n._v(" "),e("p",[n._v("set(key,value)：设置键名key对应的键值value，然后返回整个Map结构，如果key已经有值，则键值会被更新，否则就新生成该键。（因为返回的是当前Map对象，所以可以链式调用）\nget(key)：该方法读取key对应的键值，如果找不到key，返回undefined。\nhas(key)：该方法返回一个布尔值，表示某个键是否在当前Map对象中。\ndelete(key)：该方法删除某个键，返回true，如果删除失败，返回false。")]),n._v(" "),e("p",[n._v("其clear()方法已经被弃用，所以可以通过创建一个空的WeakMap并替换原对象来实现清除。\nWeakMap的设计目的在于，有时想在某个对象上面存放一些数据，但是这会形成对于这个对象的引用。一旦不再需要这两个对象，就必须手动删除这个引用，否则垃圾回收机制就不会释放对象占用的内存。\n而WeakMap的键名所引用的对象都是弱引用，即垃圾回收机制不将该引用考虑在内。因此，只要所引用的对象的其他引用都被清除，垃圾回收机制就会释放该对象所占用的内存。也就是说，一旦不再需要，WeakMap 里面的键名对象和所对应的键值对会自动消失，不用手动删除引用。\n总结：")]),n._v(" "),e("p",[n._v("Map 数据结构。它类似于对象，也是键值对的集合，但是“键”的范围不限于字符串，各种类型的值（包括对象）都可以当作键。\nWeakMap 结构与 Map 结构类似，也是用于生成键值对的集合。但是 WeakMap 只接受对象作为键名（ null 除外），不接受其他类型的值作为键名。而且 WeakMap 的键名所指向的对象，不计入垃圾回收机制。")]),n._v(" "),e("h2",{attrs:{id:"_4-javascript有哪些内置对象"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-javascript有哪些内置对象"}},[n._v("#")]),n._v(" 4. JavaScript有哪些内置对象")]),n._v(" "),e("p",[n._v('全局的对象（ global objects ）或称标准内置对象，不要和 "全局对象（global object）" 混淆。这里说的全局的对象是说在\n全局作用域里的对象。全局作用域中的其他对象可以由用户的脚本创建或由宿主程序提供。\n标准内置对象的分类：\n（1）值属性，这些全局属性返回一个简单值，这些值没有自己的属性和方法。例如 Infinity、NaN、undefined、null 字面量\n（2）函数属性，全局函数可以直接调用，不需要在调用时指定所属对象，执行结束后会将结果直接返回给调用者。例如 eval()、parseFloat()、parseInt() 等\n（3）基本对象，基本对象是定义或使用其他对象的基础。基本对象包括一般对象、函数对象和错误对象。例如 Object、Function、Boolean、Symbol、Error 等\n（4）数字和日期对象，用来表示数字、日期和执行数学计算的对象。例如 Number、Math、Date\n（5）字符串，用来表示和操作字符串的对象。例如 String、RegExp\n（6）可索引的集合对象，这些对象表示按照索引值来排序的数据集合，包括数组和类型数组，以及类数组结构的对象。例如 Array\n（7）使用键的集合对象，这些集合对象在存储数据时会使用到键，支持按照插入顺序来迭代元素。\n例如 Map、Set、WeakMap、WeakSet\n（8）矢量集合，SIMD 矢量集合中的数据会被组织为一个数据序列。\n例如 SIMD 等\n（9）结构化数据，这些对象用来表示和操作结构化的缓冲区数据，或使用 JSON 编码的数据。例如 JSON 等\n（10）控制抽象对象\n例如 Promise、Generator 等\n（11）反射。例如 Reflect、Proxy\n（12）国际化，为了支持多语言处理而加入 ECMAScript 的对象。例如 Intl、Intl.Collator 等\n（13）WebAssembly\n（14）其他。例如 arguments\n总结：\njs 中的内置对象主要指的是在程序执行前存在全局作用域里的由 js 定义的一些全局值属性、函数和用来实例化其他对象的构造函数对象。一般经常用到的如全局变量值 NaN、undefined，全局函数如 parseInt()、parseFloat() 用来实例化对象的构造函数如 Date、Object 等，还有提供数学计算的单体内置对象如 Math 对象。')]),n._v(" "),e("h2",{attrs:{id:"_5-常用的正则表达式有哪些"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-常用的正则表达式有哪些"}},[n._v("#")]),n._v(" 5. 常用的正则表达式有哪些？")]),n._v(" "),e("p",[n._v("// （1）匹配 16 进制颜色值\nvar regex = /#([0-9a-fA-F]{6}|[0-9a-fA-F]{3})/g;")]),n._v(" "),e("p",[n._v("// （2）匹配日期，如 yyyy-mm-dd 格式\nvar regex = /^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$/;")]),n._v(" "),e("p",[n._v("// （3）匹配 qq 号\nvar regex = /^[1-9][0-9]{4,10}$/g;")]),n._v(" "),e("p",[n._v("// （4）手机号码正则\nvar regex = /^1[34578]\\d{9}$/g;")]),n._v(" "),e("p",[n._v("// （5）用户名正则\nvar regex = /^[a-zA-Z$][a-zA-Z0-9_$]{4,16}$/;\n复制代码")]),n._v(" "),e("h2",{attrs:{id:"_6-对json的理解"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6-对json的理解"}},[n._v("#")]),n._v(" 6. 对JSON的理解")]),n._v(" "),e("p",[n._v("JSON 是一种基于文本的轻量级的数据交换格式。它可以被任何的编程语言读取和作为数据格式来传递。\n在项目开发中，使用 JSON 作为前后端数据交换的方式。在前端通过将一个符合 JSON 格式的数据结构序列化为\nJSON 字符串，然后将它传递到后端，后端通过 JSON 格式的字符串解析后生成对应的数据结构，以此来实现前后端数据的一个传递。\n因为 JSON 的语法是基于 js 的，因此很容易将 JSON 和 js 中的对象弄混，但是应该注意的是 JSON 和 js 中的对象不是一回事，JSON 中对象格式更加严格，比如说在 JSON 中属性值不能为函数，不能出现 NaN 这样的属性值等，因此大多数的 js 对象是不符合 JSON 对象的格式的。\n在 js 中提供了两个函数来实现 js 数据结构和 JSON 格式的转换处理，")]),n._v(" "),e("p",[n._v("JSON.stringify 函数，通过传入一个符合 JSON 格式的数据结构，将其转换为一个 JSON 字符串。如果传入的数据结构不符合 JSON 格式，那么在序列化的时候会对这些值进行对应的特殊处理，使其符合规范。在前端向后端发送数据时，可以调用这个函数将数据对象转化为 JSON 格式的字符串。\nJSON.parse() 函数，这个函数用来将 JSON 格式的字符串转换为一个 js 数据结构，如果传入的字符串不是标准的 JSON 格式的字符串的话，将会抛出错误。当从后端接收到 JSON 格式的字符串时，可以通过这个方法来将其解析为一个 js 数据结构，以此来进行数据的访问。")]),n._v(" "),e("h2",{attrs:{id:"_7-javascript脚本延迟加载的方式有哪些"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_7-javascript脚本延迟加载的方式有哪些"}},[n._v("#")]),n._v(" 7. JavaScript脚本延迟加载的方式有哪些？")]),n._v(" "),e("p",[n._v("延迟加载就是等页面加载完成之后再加载 JavaScript 文件。 js 延迟加载有助于提高页面加载速度。\n一般有以下几种方式：")]),n._v(" "),e("p",[n._v("defer 属性： 给 js 脚本添加 defer 属性，这个属性会让脚本的加载与文档的解析同步解析，然后在文档解析完成后再执行这个脚本文件，这样的话就能使页面的渲染不被阻塞。多个设置了 defer 属性的脚本按规范来说最后是顺序执行的，但是在一些浏览器中可能不是这样。\nasync 属性： 给 js 脚本添加 async 属性，这个属性会使脚本异步加载，不会阻塞页面的解析过程，但是当脚本加载完成后立即执行 js 脚本，这个时候如果文档没有解析完成的话同样会阻塞。多个 async 属性的脚本的执行顺序是不可预测的，一般不会按照代码的顺序依次执行。\n动态创建 DOM 方式： 动态创建 DOM 标签的方式，可以对文档的加载事件进行监听，当文档加载完成后再动态的创建 script 标签来引入 js 脚本。\n使用 setTimeout 延迟方法： 设置一个定时器来延迟加载js脚本文件\n让 JS 最后加载： 将 js 脚本放在文档的底部，来使 js 脚本尽可能的在最后来加载执行。")]),n._v(" "),e("h2",{attrs:{id:"_8-javascript-类数组对象的定义"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_8-javascript-类数组对象的定义"}},[n._v("#")]),n._v(" 8. JavaScript 类数组对象的定义？")]),n._v(" "),e("p",[n._v("一个拥有 length 属性和若干索引属性的对象就可以被称为类数组对象，类数组对象和数组类似，但是不能调用数组的方法。常见的类数组对象有 arguments 和 DOM 方法的返回结果，还有一个函数也可以被看作是类数组对象，因为它含有 length 属性值，代表可接收的参数个数。\n常见的类数组转换为数组的方法有这样几种：\n（1）通过 call 调用数组的 slice 方法来实现转换\nArray.prototype.slice.call(arrayLike);\n复制代码\n（2）通过 call 调用数组的 splice 方法来实现转换\nArray.prototype.splice.call(arrayLike, 0);\n复制代码\n（3）通过 apply 调用数组的 concat 方法来实现转换\nArray.prototype.concat.apply([], arrayLike);\n复制代码\n（4）通过 Array.from 方法来实现转换\nArray.from(arrayLike);\n复制代码")]),n._v(" "),e("h2",{attrs:{id:"_9-数组有哪些原生方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_9-数组有哪些原生方法"}},[n._v("#")]),n._v(" 9. 数组有哪些原生方法？")]),n._v(" "),e("p",[n._v("数组和字符串的转换方法：toString()、toLocalString()、join() 其中 join() 方法可以指定转换为字符串时的分隔符。\n数组尾部操作的方法 pop() 和 push()，push 方法可以传入多个参数。\n数组首部操作的方法 shift() 和 unshift() 重排序的方法 reverse() 和 sort()，sort() 方法可以传入一个函数来进行比较，传入前后两个值，如果返回值为正数，则交换两个参数的位置。\n数组连接的方法 concat() ，返回的是拼接好的数组，不影响原数组。\n数组截取办法 slice()，用于截取数组中的一部分返回，不影响原数组。\n数组插入方法 splice()，影响原数组查找特定项的索引的方法，indexOf() 和 lastIndexOf() 迭代方法 every()、some()、filter()、map() 和 forEach() 方法\n数组归并方法 reduce() 和 reduceRight() 方法")]),n._v(" "),e("h2",{attrs:{id:"_10-unicode、utf-8、utf-16、utf-32的区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_10-unicode、utf-8、utf-16、utf-32的区别"}},[n._v("#")]),n._v(" 10. Unicode、UTF-8、UTF-16、UTF-32的区别？")]),n._v(" "),e("p",[n._v("（1）Unicode\n在说Unicode之前需要先了解一下ASCII码：ASCII 码（American Standard Code for Information Interchange）称为美国标准信息交换码。")]),n._v(" "),e("p",[n._v('它是基于拉丁字母的一套电脑编码系统。\n它定义了一个用于代表常见字符的字典。\n它包含了"A-Z"(包含大小写)，数据"0-9" 以及一些常见的符号。\n它是专门为英语而设计的，有128个编码，对其他语言无能为力')]),n._v(" "),e("p",[n._v("ASCII码可以表示的编码有限，要想表示其他语言的编码，还是要使用Unicode来表示，可以说Unicode是ASCII 的超集。\nUnicode全称 Unicode Translation Format，又叫做统一码、万国码、单一码。Unicode 是为了解决传统的字符编码方案的局限而产生的，它为每种语言中的每个字符设定了统一并且唯一的二进制编码，以满足跨语言、跨平台进行文本转换、处理的要求。\nUnicode的实现方式（也就是编码方式）有很多种，常见的是UTF-8、UTF-16、UTF-32和USC-2。\n（2）UTF-8\nUTF-8是使用最广泛的Unicode编码方式，它是一种可变长的编码方式，可以是1—4个字节不等，它可以完全兼容ASCII码的128个字符。\n注意： UTF-8 是一种编码方式，Unicode是一个字符集合。\nUTF-8的编码规则：")]),n._v(" "),e("p",[n._v("对于单字节的符号，字节的第一位为0，后面的7位为这个字符的Unicode编码，因此对于英文字母，它的Unicode编码和ACSII编码一样。\n对于n字节的符号，第一个字节的前n位都是1，第n+1位设为0，后面字节的前两位一律设为10，剩下的没有提及的二进制位，全部为这个符号的Unicode码 。")]),n._v(" "),e("p",[n._v("来看一下具体的Unicode编号范围与对应的UTF-8二进制格式")]),n._v(" "),e("p",[n._v("编码范围（编号对应的十进制数）二进制格式0x00—0x7F （0-127）0xxxxxxx0x80—0x7FF （128-2047）110xxxxx 10xxxxxx0x800—0xFFFF  （2048-65535）1110xxxx 10xxxxxx 10xxxxxx0x10000—0x10FFFF  （65536以上）11110xxx 10xxxxxx 10xxxxxx 10xxxxxx\n那该如何通过具体的Unicode编码，进行具体的UTF-8编码呢？步骤如下：")]),n._v(" "),e("p",[n._v("找到该Unicode编码的所在的编号范围，进而找到与之对应的二进制格式\n将Unicode编码转换为二进制数（去掉最高位的0）\n将二进制数从右往左一次填入二进制格式的X中，如果有X未填，就设为0")]),n._v(" "),e("p",[n._v("来看一个实际的例子：\n“马” 字的Unicode编码是：0x9A6C，整数编号是39532\n（1）首选确定了该字符在第三个范围内，它的格式是 1110xxxx 10xxxxxx 10xxxxxx\n（2）39532对应的二进制数为1001 1010 0110 1100\n（3）将二进制数填入X中，结果是：11101001 10101001 10101100\n（3）UTF-16")]),n._v(" "),e("ol",[e("li",[n._v("平面的概念\n在了解UTF-16之前，先看一下平面的概念：\nUnicode编码中有很多很多的字符，它并不是一次性定义的，而是分区进行定义的，每个区存放65536（216）个字符，这称为一个平面，目前总共有17 个平面。\n最前面的一个平面称为基本平面，它的码点从0 — 216-1，写成16进制就是U+0000 — U+FFFF，那剩下的16个平面就是辅助平面，码点范围是 U+10000—U+10FFFF。")]),n._v(" "),e("li",[n._v("UTF-16 概念：\nUTF-16也是Unicode编码集的一种编码形式，把Unicode字符集的抽象码位映射为16位长的整数（即码元）的序列，用于数据存储或传递。Unicode字符的码位需要1个或者2个16位长的码元来表示，因此UTF-16也是用变长字节表示的。")]),n._v(" "),e("li",[n._v("UTF-16 编码规则：")])]),n._v(" "),e("p",[n._v("编号在 U+0000—U+FFFF 的字符（常用字符集），直接用两个字节表示。\n编号在 U+10000—U+10FFFF 之间的字符，需要用四个字节表示。")]),n._v(" "),e("ol",{attrs:{start:"4"}},[e("li",[n._v("编码识别\n那么问题来了，当遇到两个字节时，怎么知道是把它当做一个字符还是和后面的两个字节一起当做一个字符呢？\nUTF-16 编码肯定也考虑到了这个问题，在基本平面内，从 U+D800 — U+DFFF 是一个空段，也就是说这个区间的码点不对应任何的字符，因此这些空段就可以用来映射辅助平面的字符。\n辅助平面共有 220 个字符位，因此表示这些字符至少需要 20 个二进制位。UTF-16 将这 20 个二进制位分成两半，前 10 位映射在 U+D800 — U+DBFF，称为高位（H），后 10 位映射在 U+DC00 — U+DFFF，称为低位（L）。这就相当于，将一个辅助平面的字符拆成了两个基本平面的字符来表示。\n因此，当遇到两个字节时，发现它的码点在 U+D800 —U+DBFF之间，就可以知道，它后面的两个字节的码点应该在 U+DC00 — U+DFFF 之间，这四个字节必须放在一起进行解读。")]),n._v(" "),e("li",[n._v('举例说明\n以 "𡠀" 字为例，它的 Unicode 码点为 0x21800，该码点超出了基本平面的范围，因此需要用四个字节来表示，步骤如下：')])]),n._v(" "),e("p",[n._v("首先计算超出部分的结果：0x21800 - 0x10000\n将上面的计算结果转为20位的二进制数，不足20位就在前面补0，结果为：0001000110 0000000000\n将得到的两个10位二进制数分别对应到两个区间中\nU+D800 对应的二进制数为 1101100000000000， 将0001000110填充在它的后10 个二进制位，得到 1101100001000110，转成 16 进制数为 0xD846。同理，低位为 0xDC00，所以这个字的UTF-16 编码为 0xD846 0xDC00")]),n._v(" "),e("p",[n._v("（4） UTF-32\nUTF-32 就是字符所对应编号的整数二进制形式，每个字符占四个字节，这个是直接进行转换的。该编码方式占用的储存空间较多，所以使用较少。\n比如“马” 字的Unicode编号是：U+9A6C，整数编号是39532，直接转化为二进制：1001 1010 0110 1100，这就是它的UTF-32编码。\n（5）总结\nUnicode、UTF-8、UTF-16、UTF-32有什么区别？")]),n._v(" "),e("p",[n._v("Unicode 是编码字符集（字符集），而UTF-8、UTF-16、UTF-32是字符集编码（编码规则）；\nUTF-16 使用变长码元序列的编码方式，相较于定长码元序列的UTF-32算法更复杂，甚至比同样是变长码元序列的UTF-8也更为复杂，因为其引入了独特的代理对这样的代理机制；\nUTF-8需要判断每个字节中的开头标志信息，所以如果某个字节在传送过程中出错了，就会导致后面的字节也会解析出错；而UTF-16不会判断开头标志，即使错也只会错一个字符，所以容错能力教强；\n如果字符内容全部英文或英文与其他文字混合，但英文占绝大部分，那么用UTF-8就比UTF-16节省了很多空间；而如果字符内容全部是中文这样类似的字符或者混合字符中中文占绝大多数，那么UTF-16就占优势了，可以节省很多空间；")]),n._v(" "),e("h2",{attrs:{id:"_11-常见的位运算符有哪些-其计算规则是什么"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_11-常见的位运算符有哪些-其计算规则是什么"}},[n._v("#")]),n._v(" 11. 常见的位运算符有哪些？其计算规则是什么？")]),n._v(" "),e("p",[n._v("现代计算机中数据都是以二进制的形式存储的，即0、1两种状态，计算机对二进制数据进行的运算加减乘除等都是叫位运算，即将符号位共同参与运算的运算。\n常见的位运算有以下几种：")]),n._v(" "),e("p",[n._v("运算符描述运算规则&与两个位都为1时，结果才为1``或两个位都为0时，结果才为0^异或两个位相同为0，相异为1~取反0变1，1变0<<左移各二进制位全部左移若干位，高位丢弃，低位补0>>右移各二进制位全部右移若干位，正数左补0，负数左补1，右边丢弃")]),n._v(" "),e("ol",[e("li",[n._v("按位与运算符（&）\n定义： 参加运算的两个数据按二进制位进行“与”运算。\n运算规则：\n0 & 0 = 0"),e("br"),n._v("\n0 & 1 = 0"),e("br"),n._v("\n1 & 0 = 0"),e("br"),n._v("\n1 & 1 = 1\n复制代码\n总结：两位同时为1，结果才为1，否则结果为0。\n例如：3&5 即：\n0000 0011\n0000 0101\n= 0000 0001\n复制代码\n因此 3&5 的值为1。\n注意：负数按补码形式参加按位与运算。\n用途：\n（1）判断奇偶\n只要根据最未位是0还是1来决定，为0就是偶数，为1就是奇数。因此可以用if ((i & 1) == 0)代替if (i % 2 == 0)来判断a是不是偶数。\n（2）清零\n如果想将一个单元清零，即使其全部二进制位为0，只要与一个各位都为零的数值相与，结果为零。")]),n._v(" "),e("li",[n._v("按位或运算符（|）\n定义： 参加运算的两个对象按二进制位进行“或”运算。\n运算规则：\n0 | 0 = 0\n0 | 1 = 1"),e("br"),n._v("\n1 | 0 = 1"),e("br"),n._v("\n1 | 1 = 1\n复制代码\n总结：参加运算的两个对象只要有一个为1，其值为1。\n例如：3|5即：\n0000 0011\n0000 0101\n= 0000 0111\n复制代码\n因此，3|5的值为7。\n注意：负数按补码形式参加按位或运算。")]),n._v(" "),e("li",[n._v("异或运算符（^）\n定义： 参加运算的两个数据按二进制位进行“异或”运算。\n运算规则：\n0 ^ 0 = 0"),e("br"),n._v("\n0 ^ 1 = 1"),e("br"),n._v("\n1 ^ 0 = 1"),e("br"),n._v("\n1 ^ 1 = 0\n复制代码\n总结：参加运算的两个对象，如果两个相应位相同为0，相异为1。\n例如：3|5即：\n0000 0011\n0000 0101\n= 0000 0110\n复制代码\n因此，3^5的值为6。\n异或运算的性质:")])]),n._v(" "),e("p",[n._v("交换律：(a^b)^c == a^(b^c)\n结合律：(a + b)^c == a^b + b^c\n对于任何数x，都有 x^x=0，x^0=x\n自反性: a^b^b=a^0=a;")]),n._v(" "),e("ol",{attrs:{start:"4"}},[e("li",[n._v("取反运算符 (~)\n定义： 参加运算的一个数据按二进制进行“取反”运算。\n运算规则：\n~ 1 = 0~ 0 = 1\n复制代码\n总结：对一个二进制数按位取反，即将0变1，1变0。\n例如：~6 即：\n0000 0110= 1111 1001\n复制代码\n在计算机中，正数用原码表示，负数使用补码存储，首先看最高位，最高位1表示负数，0表示正数。此计算机二进制码为负数，最高位为符号位。\n当发现按位取反为负数时，就直接取其补码，变为十进制：\n0000 0110   = 1111 1001反码：1000 0110补码：1000 0111\n复制代码\n因此，~6的值为-7。")]),n._v(" "),e("li",[n._v("左移运算符（<<）\n定义： 将一个运算对象的各二进制位全部左移若干位，左边的二进制位丢弃，右边补0。\n设 a=1010 1110，a = a<< 2 将a的二进制位左移2位、右补0，即得a=1011 1000。\n若左移时舍弃的高位不包含1，则每左移一位，相当于该数乘以2。")]),n._v(" "),e("li",[n._v("右移运算符（>>）\n定义： 将一个数的各二进制位全部右移若干位，正数左补0，负数左补1，右边丢弃。\n例如：a=a>>2 将a的二进制位右移2位，左补0 或者 左补1得看被移数是正还是负。\n操作数每右移一位，相当于该数除以2。")]),n._v(" "),e("li",[n._v("原码、补码、反码\n上面提到了补码、反码等知识，这里就补充一下。\n计算机中的有符号数有三种表示方法，即原码、反码和补码。三种表示方法均有符号位和数值位两部分，符号位都是用0表示“正”，用1表示“负”，而数值位，三种表示方法各不相同。\n（1）原码\n原码就是一个数的二进制数。例如：10的原码为0000 1010\n（2）反码")])]),n._v(" "),e("p",[n._v("正数的反码与原码相同，如：10 反码为 0000 1010\n负数的反码为除符号位，按位取反，即0变1，1变0。")]),n._v(" "),e("p",[n._v("例如：-10\n原码：1000 1010\n反码：1111 0101\n复制代码\n（3）补码")]),n._v(" "),e("p",[n._v("正数的补码与原码相同，如：10 补码为 0000 1010\n负数的补码是原码除符号位外的所有位取反即0变1，1变0，然后加1，也就是反码加1。")]),n._v(" "),e("p",[n._v("例如：-10\n原码：1000 1010\n反码：1111 0101\n补码：1111 0110\n复制代码")]),n._v(" "),e("h2",{attrs:{id:"_12-为什么函数的-arguments-参数是类数组而不是数组-如何遍历类数组"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_12-为什么函数的-arguments-参数是类数组而不是数组-如何遍历类数组"}},[n._v("#")]),n._v(" 12. 为什么函数的 arguments 参数是类数组而不是数组？如何遍历类数组?")]),n._v(" "),e("p",[n._v("arguments是一个对象，它的属性是从 0 开始依次递增的数字，还有callee和length等属性，与数组相似；但是它却没有数组常见的方法属性，如forEach, reduce等，所以叫它们类数组。\n要遍历类数组，有三个方法：\n（1）将数组的方法应用到类数组上，这时候就可以使用call和apply方法，如：\nfunction foo(){\nArray.prototype.forEach.call(arguments, a => console.log(a))\n}\n复制代码\n（2）使用Array.from方法将类数组转化成数组：‌\nfunction foo(){\nconst arrArgs = Array.from(arguments)\narrArgs.forEach(a => console.log(a))\n}\n复制代码\n（3）使用展开运算符将类数组转化成数组\nfunction foo(){\nconst arrArgs = [...arguments]\narrArgs.forEach(a => console.log(a))\n}\n复制代码")]),n._v(" "),e("h2",{attrs:{id:"_13-什么是-dom-和-bom"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_13-什么是-dom-和-bom"}},[n._v("#")]),n._v(" 13. 什么是 DOM 和 BOM？")]),n._v(" "),e("p",[n._v("DOM 指的是文档对象模型，它指的是把文档当做一个对象，这个对象主要定义了处理网页内容的方法和接口。\nBOM 指的是浏览器对象模型，它指的是把浏览器当做一个对象来对待，这个对象主要定义了与浏览器进行交互的法和接口。BOM的核心是 window，而 window 对象具有双重角色，它既是通过 js 访问浏览器窗口的一个接口，又是一个 Global（全局）对象。这意味着在网页中定义的任何对象，变量和函数，都作为全局对象的一个属性或者方法存在。window 对象含有 location 对象、navigator 对象、screen 对象等子对象，并且 DOM 的最根本的对象 document 对象也是 BOM 的 window 对象的子对象。")]),n._v(" "),e("h2",{attrs:{id:"_14-对类数组对象的理解-如何转化为数组"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_14-对类数组对象的理解-如何转化为数组"}},[n._v("#")]),n._v(" 14. 对类数组对象的理解，如何转化为数组")]),n._v(" "),e("p",[n._v("一个拥有 length 属性和若干索引属性的对象就可以被称为类数组对象，类数组对象和数组类似，但是不能调用数组的方法。常见的类数组对象有 arguments 和 DOM 方法的返回结果，函数参数也可以被看作是类数组对象，因为它含有 length属性值，代表可接收的参数个数。\n常见的类数组转换为数组的方法有这样几种：")]),n._v(" "),e("p",[n._v("通过 call 调用数组的 slice 方法来实现转换")]),n._v(" "),e("p",[n._v("Array.prototype.slice.call(arrayLike);\n复制代码")]),n._v(" "),e("p",[n._v("通过 call 调用数组的 splice 方法来实现转换")]),n._v(" "),e("p",[n._v("Array.prototype.splice.call(arrayLike, 0);\n复制代码")]),n._v(" "),e("p",[n._v("通过 apply 调用数组的 concat 方法来实现转换")]),n._v(" "),e("p",[n._v("Array.prototype.concat.apply([], arrayLike);\n复制代码")]),n._v(" "),e("p",[n._v("通过 Array.from 方法来实现转换")]),n._v(" "),e("p",[n._v("Array.from(arrayLike);\n复制代码")]),n._v(" "),e("h2",{attrs:{id:"_15-escape、encodeuri、encodeuricomponent-的区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_15-escape、encodeuri、encodeuricomponent-的区别"}},[n._v("#")]),n._v(" 15. escape、encodeURI、encodeURIComponent 的区别")]),n._v(" "),e("p",[n._v("encodeURI 是对整个 URI 进行转义，将 URI 中的非法字符转换为合法字符，所以对于一些在 URI 中有特殊意义的字符不会进行转义。\nencodeURIComponent 是对 URI 的组成部分进行转义，所以一些特殊字符也会得到转义。\nescape 和 encodeURI 的作用相同，不过它们对于 unicode 编码为 0xff 之外字符的时候会有区别，escape 是直接在字符的 unicode 编码前加上 %u，而 encodeURI 首先会将字符转换为 UTF-8 的格式，再在每个字节前加上 %。")]),n._v(" "),e("h2",{attrs:{id:"_16-对ajax的理解-实现一个ajax请求"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_16-对ajax的理解-实现一个ajax请求"}},[n._v("#")]),n._v(" 16. 对AJAX的理解，实现一个AJAX请求")]),n._v(" "),e("p",[n._v("AJAX是 Asynchronous JavaScript and XML 的缩写，指的是通过 JavaScript 的 异步通信，从服务器获取 XML 文档从中提取数据，再更新当前网页的对应部分，而不用刷新整个网页。\n创建AJAX请求的步骤：")]),n._v(" "),e("p",[n._v("创建一个 XMLHttpRequest 对象。\n在这个对象上使用 open 方法创建一个 HTTP 请求，open 方法所需要的参数是请求的方法、请求的地址、是否异步和用户的认证信息。\n在发起请求前，可以为这个对象添加一些信息和监听函数。比如说可以通过 setRequestHeader 方法来为请求添加头信息。还可以为这个对象添加一个状态监听函数。一个 XMLHttpRequest 对象一共有 5 个状态，当它的状态变化时会触发onreadystatechange 事件，可以通过设置监听函数，来处理请求成功后的结果。当对象的 readyState 变为 4 的时候，代表服务器返回的数据接收完成，这个时候可以通过判断请求的状态，如果状态是 2xx 或者 304 的话则代表返回正常。这个时候就可以通过 response 中的数据来对页面进行更新了。\n当对象的属性和监听函数设置完成后，最后调用 sent 方法来向服务器发起请求，可以传入参数作为发送的数据体。")]),n._v(" "),e("p",[n._v('const SERVER_URL = "/server";\nlet xhr = new XMLHttpRequest();\n// 创建 Http 请求\nxhr.open("GET", url, true);\n// 设置状态监听函数\nxhr.onreadystatechange = function() {\nif (this.readyState !== 4) return;\n// 当请求成功时\nif (this.status === 200) {\nhandle(this.response);\n} else {\nconsole.error(this.statusText);\n}\n};\n// 设置请求失败时的监听函数\nxhr.onerror = function() {\nconsole.error(this.statusText);\n};\n// 设置请求头信息\nxhr.responseType = "json";\nxhr.setRequestHeader("Accept", "application/json");\n// 发送 Http 请求\nxhr.send(null);\n复制代码\n使用Promise封装AJAX：\n// promise 封装实现：\nfunction getJSON(url) {\n// 创建一个 promise 对象\nlet promise = new Promise(function(resolve, reject) {\nlet xhr = new XMLHttpRequest();\n// 新建一个 http 请求\nxhr.open("GET", url, true);\n// 设置状态的监听函数\nxhr.onreadystatechange = function() {\nif (this.readyState !== 4) return;\n// 当请求成功或失败时，改变 promise 的状态\nif (this.status === 200) {\nresolve(this.response);\n} else {\nreject(new Error(this.statusText));\n}\n};\n// 设置错误监听函数\nxhr.onerror = function() {\nreject(new Error(this.statusText));\n};\n// 设置响应的数据类型\nxhr.responseType = "json";\n// 设置请求头信息\nxhr.setRequestHeader("Accept", "application/json");\n// 发送 http 请求\nxhr.send(null);\n});\nreturn promise;\n}\n复制代码')]),n._v(" "),e("h2",{attrs:{id:"_17-javascript为什么要进行变量提升-它导致了什么问题"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_17-javascript为什么要进行变量提升-它导致了什么问题"}},[n._v("#")]),n._v(" 17. JavaScript为什么要进行变量提升，它导致了什么问题？")]),n._v(" "),e("p",[n._v("变量提升的表现是，无论在函数中何处位置声明的变量，好像都被提升到了函数的首部，可以在变量声明前访问到而不会报错。\n造成变量声明提升的本质原因是 js 引擎在代码执行前有一个解析的过程，创建了执行上下文，初始化了一些代码执行时需要用到的对象。当访问一个变量时，会到当前执行上下文中的作用域链中去查找，而作用域链的首端指向的是当前执行上下文的变量对象，这个变量对象是执行上下文的一个属性，它包含了函数的形参、所有的函数和变量声明，这个对象的是在代码解析的时候创建的。\n首先要知道，JS在拿到一个变量或者一个函数的时候，会有两步操作，即解析和执行。")]),n._v(" "),e("p",[n._v("在解析阶段，JS会检查语法，并对函数进行预编译。解析的时候会先创建一个全局执行上下文环境，先把代码中即将执行的变量、函数声明都拿出来，变量先赋值为undefined，函数先声明好可使用。在一个函数执行之前，也会创建一个函数执行上下文环境，跟全局执行上下文类似，不过函数执行上下文会多出this、arguments和函数的参数。")]),n._v(" "),e("p",[n._v("全局上下文：变量定义，函数声明\n函数上下文：变量定义，函数声明，this，arguments")]),n._v(" "),e("p",[n._v("在执行阶段，就是按照代码的顺序依次执行。")]),n._v(" "),e("p",[n._v("那为什么会进行变量提升呢？主要有以下两个原因：")]),n._v(" "),e("p",[n._v("提高性能\n容错性更好")]),n._v(" "),e("p",[n._v("（1）提高性能\n在JS代码执行之前，会进行语法检查和预编译，并且这一操作只进行一次。这么做就是为了提高性能，如果没有这一步，那么每次执行代码前都必须重新解析一遍该变量（函数），而这是没有必要的，因为变量（函数）的代码并不会改变，解析一遍就够了。\n在解析的过程中，还会为函数生成预编译代码。在预编译时，会统计声明了哪些变量、创建了哪些函数，并对函数的代码进行压缩，去除注释、不必要的空白等。这样做的好处就是每次执行函数时都可以直接为该函数分配栈空间（不需要再解析一遍去获取代码中声明了哪些变量，创建了哪些函数），并且因为代码压缩的原因，代码执行也更快了。\n（2）容错性更好\n变量提升可以在一定程度上提高JS的容错性，看下面的代码：\na = 1;var a;console.log(a);\n复制代码\n如果没有变量提升，这两行代码就会报错，但是因为有了变量提升，这段代码就可以正常执行。\n虽然，在可以开发过程中，可以完全避免这样写，但是有时代码很复杂的时候。可能因为疏忽而先使用后定义了，这样也不会影响正常使用。由于变量提升的存在，而会正常运行。\n总结：")]),n._v(" "),e("p",[n._v("解析和预编译过程中的声明提升可以提高性能，让函数可以在执行时预先为变量分配栈空间\n声明提升还可以提高JS代码的容错性，使一些不规范的代码也可以正常执行")]),n._v(" "),e("p",[n._v("变量提升虽然有一些优点，但是他也会造成一定的问题，在ES6中提出了let、const来定义变量，它们就没有变量提升的机制。下面看一下变量提升可能会导致的问题：\nvar tmp = new Date();")]),n._v(" "),e("p",[n._v("function fn(){\nconsole.log(tmp);\nif(false){\nvar tmp = 'hello world';\n}\n}")]),n._v(" "),e("p",[n._v("fn();  // undefined\n复制代码\n在这个函数中，原本是要打印出外层的tmp变量，但是因为变量提升的问题，内层定义的tmp被提到函数内部的最顶部，相当于覆盖了外层的tmp，所以打印结果为undefined。\nvar tmp = 'hello world';")]),n._v(" "),e("p",[n._v("for (var i = 0; i < tmp.length; i++) {\nconsole.log(tmp[i]);\n}")]),n._v(" "),e("p",[n._v("console.log(i); // 11\n复制代码\n由于遍历时定义的i会变量提升成为一个全局变量，在函数结束之后不会被销毁，所以打印出来11。")]),n._v(" "),e("h2",{attrs:{id:"_18-什么是尾调用-使用尾调用有什么好处"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_18-什么是尾调用-使用尾调用有什么好处"}},[n._v("#")]),n._v(" 18. 什么是尾调用，使用尾调用有什么好处？")]),n._v(" "),e("p",[n._v("尾调用指的是函数的最后一步调用另一个函数。代码执行是基于执行栈的，所以当在一个函数里调用另一个函数时，会保留当前的执行上下文，然后再新建另外一个执行上下文加入栈中。使用尾调用的话，因为已经是函数的最后一步，所以这时可以不必再保留当前的执行上下文，从而节省了内存，这就是尾调用优化。但是 ES6 的尾调用优化只在严格模式下开启，正常模式是无效的。")]),n._v(" "),e("h2",{attrs:{id:"_19-es6模块与commonjs模块有什么异同"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_19-es6模块与commonjs模块有什么异同"}},[n._v("#")]),n._v(" 19.  ES6模块与CommonJS模块有什么异同？")]),n._v(" "),e("p",[n._v("ES6 Module和CommonJS模块的区别：")]),n._v(" "),e("p",[n._v("CommonJS是对模块的浅拷⻉，ES6 Module是对模块的引⽤，即ES6 Module只存只读，不能改变其值，也就是指针指向不能变，类似const；\nimport的接⼝是read-only（只读状态），不能修改其变量值。 即不能修改其变量的指针指向，但可以改变变量内部指针指向，可以对commonJS对重新赋值（改变指针指向），但是对ES6 Module赋值会编译报错。")]),n._v(" "),e("p",[n._v("ES6 Module和CommonJS模块的共同点：")]),n._v(" "),e("p",[n._v("CommonJS和ES6 Module都可以对引⼊的对象进⾏赋值，即对对象内部属性的值进⾏改变。")]),n._v(" "),e("h2",{attrs:{id:"_20-常见的dom操作有哪些"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_20-常见的dom操作有哪些"}},[n._v("#")]),n._v(" 20. 常见的DOM操作有哪些")]),n._v(" "),e("p",[n._v("1）DOM 节点的获取\nDOM 节点的获取的API及使用：\ngetElementById // 按照 id 查询\ngetElementsByTagName // 按照标签名查询\ngetElementsByClassName // 按照类名查询\nquerySelectorAll // 按照 css 选择器查询")]),n._v(" "),e("p",[n._v("// 按照 id 查询\nvar imooc = document.getElementById('imooc') // 查询到 id 为 imooc 的元素\n// 按照标签名查询\nvar pList = document.getElementsByTagName('p')  // 查询到标签为 p 的集合\nconsole.log(divList.length)\nconsole.log(divList[0])\n// 按照类名查询\nvar moocList = document.getElementsByClassName('mooc') // 查询到类名为 mooc 的集合\n// 按照 css 选择器查询\nvar pList = document.querySelectorAll('.mooc') // 查询到类名为 mooc 的集合\n复制代码\n2）DOM 节点的创建\n创建一个新节点，并把它添加到指定节点的后面。 已知的 HTML 结构如下：")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('<html>\n  <head>\n    <title>DEMO</title>\n  </head>\n  <body>\n    <div id="container"> \n      <h1 id="title">我是标题</h1>\n    </div>   \n  </body>\n</html>\n')])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br")])]),e("p",[n._v("要求添加一个有内容的 span 节点到 id 为 title 的节点后面，做法就是：\n// 首先获取父节点\nvar container = document.getElementById('container')\n// 创建新节点\nvar targetSpan = document.createElement('span')\n// 设置 span 节点的内容\ntargetSpan.innerHTML = 'hello world'\n// 把新创建的元素塞进父节点里去\ncontainer.appendChild(targetSpan)\n复制代码\n3）DOM 节点的删除\n删除指定的 DOM 节点， 已知的 HTML 结构如下：")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('<html>\n  <head>\n    <title>DEMO</title>\n  </head>\n  <body>\n    <div id="container"> \n      <h1 id="title">我是标题</h1>\n    </div>   \n  </body>\n</html>\n')])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br")])]),e("p",[n._v("需要删除 id 为 title 的元素，做法是：\n// 获取目标元素的父元素\nvar container = document.getElementById('container')\n// 获取目标元素\nvar targetNode = document.getElementById('title')\n// 删除目标元素\ncontainer.removeChild(targetNode)\n复制代码\n或者通过子节点数组来完成删除：\n// 获取目标元素的父元素var container = document.getElementById('container')// 获取目标元素var targetNode = container.childNodes[1]// 删除目标元素container.removeChild(targetNode)\n复制代码\n4）修改 DOM 元素\n修改 DOM 元素这个动作可以分很多维度，比如说移动 DOM 元素的位置，修改 DOM 元素的属性等。\n将指定的两个 DOM 元素交换位置， 已知的 HTML 结构如下：")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('<html>\n  <head>\n    <title>DEMO</title>\n  </head>\n  <body>\n    <div id="container"> \n      <h1 id="title">我是标题</h1>\n      <p id="content">我是内容</p>\n    </div>   \n  </body>\n</html>\n')])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br")])]),e("p",[n._v("现在需要调换 title 和 content 的位置，可以考虑 insertBefore 或者 appendChild：\n// 获取父元素\nvar container = document.getElementById('container')")]),n._v(" "),e("p",[n._v("// 获取两个需要被交换的元素\nvar title = document.getElementById('title')\nvar content = document.getElementById('content')\n// 交换两个元素，把 content 置于 title 前面\ncontainer.insertBefore(content, title)\n复制代码")]),n._v(" "),e("h2",{attrs:{id:"_21-use-strict是什么意思-使用它区别是什么"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_21-use-strict是什么意思-使用它区别是什么"}},[n._v("#")]),n._v(" 21. use strict是什么意思 ? 使用它区别是什么？")]),n._v(" "),e("p",[n._v("use strict 是一种 ECMAscript5 添加的（严格模式）运行模式，这种模式使得 Javascript 在更严格的条件下运行。设立严格模式的目的如下：")]),n._v(" "),e("p",[n._v("消除 Javascript 语法的不合理、不严谨之处，减少怪异行为;\n消除代码运行的不安全之处，保证代码运行的安全；\n提高编译器效率，增加运行速度；\n为未来新版本的 Javascript 做好铺垫。")]),n._v(" "),e("p",[n._v("区别：")]),n._v(" "),e("p",[n._v("禁止使用 with 语句。\n禁止 this 关键字指向全局对象。\n对象不能有重名的属性。")]),n._v(" "),e("h2",{attrs:{id:"_22-如何判断一个对象是否属于某个类"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_22-如何判断一个对象是否属于某个类"}},[n._v("#")]),n._v(" 22. 如何判断一个对象是否属于某个类？")]),n._v(" "),e("p",[n._v("第一种方式，使用 instanceof 运算符来判断构造函数的 prototype 属性是否出现在对象的原型链中的任何位置。\n第二种方式，通过对象的 constructor 属性来判断，对象的 constructor 属性指向该对象的构造函数，但是这种方式不是很安全，因为 constructor 属性可以被改写。\n第三种方式，如果需要判断的是某个内置的引用类型的话，可以使用 Object.prototype.toString() 方法来打印对象的[[Class]] 属性来进行判断。")]),n._v(" "),e("h2",{attrs:{id:"_23-强类型语言和弱类型语言的区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_23-强类型语言和弱类型语言的区别"}},[n._v("#")]),n._v(" 23. 强类型语言和弱类型语言的区别")]),n._v(" "),e("p",[n._v("强类型语言：强类型语言也称为强类型定义语言，是一种总是强制类型定义的语言，要求变量的使用要严格符合定义，所有变量都必须先定义后使用。Java和C++等语言都是强制类型定义的，也就是说，一旦一个变量被指定了某个数据类型，如果不经过强制转换，那么它就永远是这个数据类型了。例如你有一个整数，如果不显式地进行转换，你不能将其视为一个字符串。\n弱类型语言：弱类型语言也称为弱类型定义语言，与强类型定义相反。JavaScript语言就属于弱类型语言。简单理解就是一种变量类型可以被忽略的语言。比如JavaScript是弱类型定义的，在JavaScript中就可以将字符串'12'和整数3进行连接得到字符串'123'，在相加的时候会进行强制类型转换。")]),n._v(" "),e("p",[n._v("两者对比：强类型语言在速度上可能略逊色于弱类型语言，但是强类型语言带来的严谨性可以有效地帮助避免许多错误。")]),n._v(" "),e("h2",{attrs:{id:"_24-解释性语言和编译型语言的区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_24-解释性语言和编译型语言的区别"}},[n._v("#")]),n._v(" 24. 解释性语言和编译型语言的区别")]),n._v(" "),e("p",[n._v("（1）解释型语言\n使用专门的解释器对源程序逐行解释成特定平台的机器码并立即执行。是代码在执行时才被解释器一行行动态翻译和执行，而不是在执行之前就完成翻译。解释型语言不需要事先编译，其直接将源代码解释成机器码并立即执行，所以只要某一平台提供了相应的解释器即可运行该程序。其特点总结如下")]),n._v(" "),e("p",[n._v("解释型语言每次运行都需要将源代码解释称机器码并执行，效率较低；\n只要平台提供相应的解释器，就可以运行源代码，所以可以方便源程序移植；\nJavaScript、Python等属于解释型语言。")]),n._v(" "),e("p",[n._v("（2）编译型语言\n使用专门的编译器，针对特定的平台，将高级语言源代码一次性的编译成可被该平台硬件执行的机器码，并包装成该平台所能识别的可执行性程序的格式。在编译型语言写的程序执行之前，需要一个专门的编译过程，把源代码编译成机器语言的文件，如exe格式的文件，以后要再运行时，直接使用编译结果即可，如直接运行exe文件。因为只需编译一次，以后运行时不需要编译，所以编译型语言执行效率高。其特点总结如下：")]),n._v(" "),e("p",[n._v("一次性的编译成平台相关的机器语言文件，运行时脱离开发环境，运行效率高；\n与特定平台相关，一般无法移植到其他平台；\nC、C++等属于编译型语言。")]),n._v(" "),e("p",[n._v("两者主要区别在于： 前者源程序编译后即可在该平台运行，后者是在运行期间才编译。所以前者运行速度快，后者跨平台性好。")]),n._v(" "),e("h2",{attrs:{id:"_25-for-in和for-of的区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_25-for-in和for-of的区别"}},[n._v("#")]),n._v(" 25. for...in和for...of的区别")]),n._v(" "),e("p",[n._v("for…of 是ES6新增的遍历方式，允许遍历一个含有iterator接口的数据结构（数组、对象等）并且返回各项的值，和ES3中的for…in的区别如下")]),n._v(" "),e("p",[n._v("for…of 遍历获取的是对象的键值，for…in 获取的是对象的键名；\nfor… in 会遍历对象的整个原型链，性能非常差不推荐使用，而 for … of 只遍历当前对象不会遍历原型链；\n对于数组的遍历，for…in 会返回数组中所有可枚举的属性(包括原型链上可枚举的属性)，for…of 只返回数组的下标对应的属性值；")]),n._v(" "),e("p",[n._v("总结： for...in 循环主要是为了遍历对象而生，不适用于遍历数组；for...of 循环可以用来遍历数组、类数组对象，字符串、Set、Map 以及 Generator 对象。")]),n._v(" "),e("h2",{attrs:{id:"_26-如何使用for-of遍历对象"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_26-如何使用for-of遍历对象"}},[n._v("#")]),n._v(" 26. 如何使用for...of遍历对象")]),n._v(" "),e("p",[n._v("for…of是作为ES6新增的遍历方式，允许遍历一个含有iterator接口的数据结构（数组、对象等）并且返回各项的值，普通的对象用for..of遍历是会报错的。\n如果需要遍历的对象是类数组对象，用Array.from转成数组即可。\nvar obj = {\n0:'one',\n1:'two',\nlength: 2\n};\nobj = Array.from(obj);\nfor(var k of obj){\nconsole.log(k)\n}\n复制代码\n如果不是类数组对象，就给对象添加一个[Symbol.iterator]属性，并指向一个迭代器即可。\n//方法一：\nvar obj = {\na:1,\nb:2,\nc:3\n};")]),n._v(" "),e("p",[n._v("obj[Symbol.iterator] = function(){\nvar keys = Object.keys(this);\nvar count = 0;\nreturn {\nnext(){\nif(count<keys.length){\nreturn {value: obj[keys[count++]],done:false};\n}else{\nreturn {value:undefined,done:true};\n}\n}\n}\n};")]),n._v(" "),e("p",[n._v("for(var k of obj){\nconsole.log(k);\n}")]),n._v(" "),e("p",[n._v("// 方法二\nvar obj = {\na:1,\nb:2,\nc:3\n};\nobj[Symbol.iterator] = function*(){\nvar keys = Object.keys(obj);\nfor(var k of keys){\nyield [k,obj[k]]\n}\n};")]),n._v(" "),e("p",[n._v("for(var [k,v] of obj){\nconsole.log(k,v);\n}")]),n._v(" "),e("p",[n._v("复制代码")]),n._v(" "),e("h2",{attrs:{id:"_27-ajax、axios、fetch的区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_27-ajax、axios、fetch的区别"}},[n._v("#")]),n._v(" 27. ajax、axios、fetch的区别")]),n._v(" "),e("p",[n._v("（1）AJAX\nAjax 即“AsynchronousJavascriptAndXML”（异步 JavaScript 和 XML），是指一种创建交互式网页应用的网页开发技术。它是一种在无需重新加载整个网页的情况下，能够更新部分网页的技术。通过在后台与服务器进行少量数据交换，Ajax 可以使网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。传统的网页（不使用 Ajax）如果需要更新内容，必须重载整个网页页面。其缺点如下：")]),n._v(" "),e("p",[n._v("本身是针对MVC编程，不符合前端MVVM的浪潮\n基于原生XHR开发，XHR本身的架构不清晰\n不符合关注分离（Separation of Concerns）的原则\n配置和调用方式非常混乱，而且基于事件的异步模型不友好。")]),n._v(" "),e("p",[n._v("（2）Fetch\nfetch号称是AJAX的替代品，是在ES6出现的，使用了ES6中的promise对象。Fetch是基于promise设计的。Fetch的代码结构比起ajax简单多。fetch不是ajax的进一步封装，而是原生js，没有使用XMLHttpRequest对象。\nfetch的优点：")]),n._v(" "),e("p",[n._v("语法简洁，更加语义化\n基于标准 Promise 实现，支持 async/await\n更加底层，提供的API丰富（request, response）\n脱离了XHR，是ES规范里新的实现方式")]),n._v(" "),e("p",[n._v("fetch的缺点：")]),n._v(" "),e("p",[n._v("fetch只对网络请求报错，对400，500都当做成功的请求，服务器返回 400，500 错误码时并不会 reject，只有网络错误这些导致请求不能完成时，fetch 才会被 reject。\nfetch默认不会带cookie，需要添加配置项： fetch(url, {credentials: 'include'})\nfetch不支持abort，不支持超时控制，使用setTimeout及Promise.reject的实现的超时控制并不能阻止请求过程继续在后台运行，造成了流量的浪费\nfetch没有办法原生监测请求的进度，而XHR可以")]),n._v(" "),e("p",[n._v("（3）Axios\nAxios 是一种基于Promise封装的HTTP客户端，其特点如下：")]),n._v(" "),e("p",[n._v("浏览器端发起XMLHttpRequests请求\nnode端发起http请求\n支持Promise API\n监听请求和返回\n对请求和返回进行转化\n取消请求\n自动转换json数据\n客户端支持抵御XSRF攻击")]),n._v(" "),e("h2",{attrs:{id:"_28-数组的遍历方法有哪些"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_28-数组的遍历方法有哪些"}},[n._v("#")]),n._v(" 28. 数组的遍历方法有哪些")]),n._v(" "),e("p",[n._v("方法是否改变原数组特点forEach()否数组方法，不改变原数组，没有返回值map()否数组方法，不改变原数组，有返回值，可链式调用filter()否数组方法，过滤数组，返回包含符合条件的元素的数组，可链式调用for...of否for...of遍历具有Iterator迭代器的对象的属性，返回的是数组的元素、对象的属性值，不能遍历普通的obj对象，将异步循环变成同步循环every() 和 some()否数组方法，some()只要有一个是true，便返回true；而every()只要有一个是false，便返回false.find() 和 findIndex()否数组方法，find()返回的是第一个符合条件的值；findIndex()返回的是第一个返回条件的值的索引值reduce() 和 reduceRight()否数组方法，reduce()对数组正序操作；reduceRight()对数组逆序操作\n遍历方法的详细解释：《细数JavaScript中那些遍历和循环》")]),n._v(" "),e("h2",{attrs:{id:"_29-foreach和map方法有什么区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_29-foreach和map方法有什么区别"}},[n._v("#")]),n._v(" 29. forEach和map方法有什么区别")]),n._v(" "),e("p",[n._v("这方法都是用来遍历数组的，两者区别如下：")]),n._v(" "),e("p",[n._v("forEach()方法会针对每一个元素执行提供的函数，对数据的操作会改变原数组，该方法没有返回值；\nmap()方法不会改变原数组的值，返回一个新数组，新数组中的值为原数组调用函数处理之后的值；")]),n._v(" "),e("h1",{attrs:{id:"四、原型与原型链"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#四、原型与原型链"}},[n._v("#")]),n._v(" 四、原型与原型链")]),n._v(" "),e("h2",{attrs:{id:"_1-对原型、原型链的理解"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-对原型、原型链的理解"}},[n._v("#")]),n._v(" 1. 对原型、原型链的理解")]),n._v(" "),e("p",[n._v("在JavaScript中是使用构造函数来新建一个对象的，每一个构造函数的内部都有一个 prototype 属性，它的属性值是一个对象，这个对象包含了可以由该构造函数的所有实例共享的属性和方法。当使用构造函数新建一个对象后，在这个对象的内部将包含一个指针，这个指针指向构造函数的 prototype 属性对应的值，在 ES5 中这个指针被称为对象的原型。一般来说不应该能够获取到这个值的，但是现在浏览器中都实现了 proto 属性来访问这个属性，但是最好不要使用这个属性，因为它不是规范中规定的。ES5 中新增了一个 Object.getPrototypeOf() 方法，可以通过这个方法来获取对象的原型。\n当访问一个对象的属性时，如果这个对象内部不存在这个属性，那么它就会去它的原型对象里找这个属性，这个原型对象又会有自己的原型，于是就这样一直找下去，也就是原型链的概念。原型链的尽头一般来说都是 Object.prototype 所以这就是新建的对象为什么能够使用 toString() 等方法的原因。\n特点： JavaScript 对象是通过引用来传递的，创建的每个新对象实体中并没有一份属于自己的原型副本。当修改原型时，与之相关的对象也会继承这一改变。")]),n._v(" "),e("h2",{attrs:{id:"_2-原型修改、重写"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-原型修改、重写"}},[n._v("#")]),n._v(" 2. 原型修改、重写")]),n._v(" "),e("p",[n._v("function Person(name) {\nthis.name = name\n}\n// 修改原型\nPerson.prototype.getName = function() {}\nvar p = new Person('hello')\nconsole.log(p."),e("strong",[n._v("proto")]),n._v(" === Person.prototype) // true\nconsole.log(p."),e("strong",[n._v("proto")]),n._v(" === p.constructor.prototype) // true\n// 重写原型\nPerson.prototype = {\ngetName: function() {}\n}\nvar p = new Person('hello')\nconsole.log(p."),e("strong",[n._v("proto")]),n._v(" === Person.prototype)        // true\nconsole.log(p."),e("strong",[n._v("proto")]),n._v(" === p.constructor.prototype) // false\n复制代码\n可以看到修改原型的时候p的构造函数不是指向Person了，因为直接给Person的原型对象直接用对象赋值时，它的构造函数指向的了根构造函数Object，所以这时候p.constructor === Object ，而不是p.constructor === Person。要想成立，就要用constructor指回来：\nPerson.prototype = {\ngetName: function() {}\n}\nvar p = new Person('hello')\np.constructor = Person\nconsole.log(p."),e("strong",[n._v("proto")]),n._v(" === Person.prototype)        // true\nconsole.log(p."),e("strong",[n._v("proto")]),n._v(" === p.constructor.prototype) // true")]),n._v(" "),e("p",[n._v("复制代码")]),n._v(" "),e("h2",{attrs:{id:"_3-原型链指向"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-原型链指向"}},[n._v("#")]),n._v(" 3. 原型链指向")]),n._v(" "),e("p",[n._v("p."),e("strong",[n._v("proto")]),n._v("  // Person.prototype\nPerson.prototype."),e("strong",[n._v("proto")]),n._v("  // Object.prototype\np."),e("strong",[n._v("proto")]),n._v("."),e("strong",[n._v("proto")]),n._v(" //Object.prototype\np."),e("strong",[n._v("proto")]),n._v(".constructor.prototype."),e("strong",[n._v("proto")]),n._v(" // Object.prototype\nPerson.prototype.constructor.prototype."),e("strong",[n._v("proto")]),n._v(" // Object.prototype\np1."),e("strong",[n._v("proto")]),n._v(".constructor // Person\nPerson.prototype.constructor  // Person\n复制代码")]),n._v(" "),e("h2",{attrs:{id:"_4-原型链的终点是什么-如何打印出原型链的终点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-原型链的终点是什么-如何打印出原型链的终点"}},[n._v("#")]),n._v(" 4. 原型链的终点是什么？如何打印出原型链的终点？")]),n._v(" "),e("p",[n._v("由于Object是构造函数，原型链终点是Object.prototype."),e("strong",[n._v("proto")]),n._v("，而Object.prototype."),e("strong",[n._v("proto")]),n._v("=== null // true，所以，原型链的终点是null。原型链上的所有原型都是对象，所有的对象最终都是由Object构造的，而Object.prototype的下一级是Object.prototype."),e("strong",[n._v("proto")]),n._v("。")]),n._v(" "),e("h2",{attrs:{id:"_5-如何获得对象非原型链上的属性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-如何获得对象非原型链上的属性"}},[n._v("#")]),n._v(" 5. 如何获得对象非原型链上的属性？")]),n._v(" "),e("p",[n._v("使用后hasOwnProperty()方法来判断属性是否属于原型链的属性：\nfunction iterate(obj){\nvar res=[];\nfor(var key in obj){\nif(obj.hasOwnProperty(key))\nres.push(key+': '+obj[key]);\n}\nreturn res;\n}\n复制代码")]),n._v(" "),e("h1",{attrs:{id:"五、执行上下文-作用域链-闭包"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#五、执行上下文-作用域链-闭包"}},[n._v("#")]),n._v(" 五、执行上下文/作用域链/闭包")]),n._v(" "),e("h2",{attrs:{id:"_1-对闭包的理解"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-对闭包的理解"}},[n._v("#")]),n._v(" 1. 对闭包的理解")]),n._v(" "),e("p",[n._v("闭包是指有权访问另一个函数作用域中变量的函数，创建闭包的最常见的方式就是在一个函数内创建另一个函数，创建的函数可以访问到当前函数的局部变量。\n闭包有两个常用的用途；")]),n._v(" "),e("p",[n._v("闭包的第一个用途是使我们在函数外部能够访问到函数内部的变量。通过使用闭包，可以通过在外部调用闭包函数，从而在外部访问到函数内部的变量，可以使用这种方法来创建私有变量。\n闭包的另一个用途是使已经运行结束的函数上下文中的变量对象继续留在内存中，因为闭包函数保留了这个变量对象的引用，所以这个变量对象不会被回收。")]),n._v(" "),e("p",[n._v("比如，函数 A 内部有一个函数 B，函数 B 可以访问到函数 A 中的变量，那么函数 B 就是闭包。\nfunction A() {\nlet a = 1\nwindow.B = function () {\nconsole.log(a)\n}\n}\nA()\nB() // 1\n复制代码\n在 JS 中，闭包存在的意义就是让我们可以间接访问函数内部的变量。经典面试题：循环中使用闭包解决 var 定义函数的问题\nfor (var i = 1; i <= 5; i++) {\nsetTimeout(function timer() {\nconsole.log(i)\n}, i * 1000)\n}\n复制代码\n首先因为 setTimeout 是个异步函数，所以会先把循环全部执行完毕，这时候 i 就是 6 了，所以会输出一堆 6。解决办法有三种：")]),n._v(" "),e("p",[n._v("第一种是使用闭包的方式")]),n._v(" "),e("p",[n._v("for (var i = 1; i <= 5; i++) {  ;(function(j) {    setTimeout(function timer() {      console.log(j)    }, j * 1000)  })(i)}\n复制代码\n在上述代码中，首先使用了立即执行函数将 i 传入函数内部，这个时候值就被固定在了参数 j 上面不会改变，当下次执行 timer 这个闭包的时候，就可以使用外部函数的变量 j，从而达到目的。")]),n._v(" "),e("p",[n._v("第二种就是使用 setTimeout 的第三个参数，这个参数会被当成 timer 函数的参数传入。")]),n._v(" "),e("p",[n._v("for (var i = 1; i <= 5; i++) {\nsetTimeout(\nfunction timer(j) {\nconsole.log(j)\n},\ni * 1000,\ni\n)\n}\n复制代码")]),n._v(" "),e("p",[n._v("第三种就是使用 let 定义 i 了来解决问题了，这个也是最为推荐的方式")]),n._v(" "),e("p",[n._v("for (let i = 1; i <= 5; i++) {\nsetTimeout(function timer() {\nconsole.log(i)\n}, i * 1000)\n}\n复制代码")]),n._v(" "),e("h2",{attrs:{id:"_2-对作用域、作用域链的理解"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-对作用域、作用域链的理解"}},[n._v("#")]),n._v(" 2. 对作用域、作用域链的理解")]),n._v(" "),e("p",[n._v("1）全局作用域和函数作用域\n（1）全局作用域")]),n._v(" "),e("p",[n._v("最外层函数和最外层函数外面定义的变量拥有全局作用域\n所有未定义直接赋值的变量自动声明为全局作用域\n所有window对象的属性拥有全局作用域\n全局作用域有很大的弊端，过多的全局作用域变量会污染全局命名空间，容易引起命名冲突。")]),n._v(" "),e("p",[n._v("（2）函数作用域")]),n._v(" "),e("p",[n._v("函数作用域声明在函数内部的变零，一般只有固定的代码片段可以访问到\n作用域是分层的，内层作用域可以访问外层作用域，反之不行")]),n._v(" "),e("p",[n._v("2）块级作用域")]),n._v(" "),e("p",[n._v("使用ES6中新增的let和const指令可以声明块级作用域，块级作用域可以在函数中创建也可以在一个代码块中的创建（由{ }包裹的代码片段）\nlet和const声明的变量不会有变量提升，也不可以重复声明\n在循环中比较适合绑定块级作用域，这样就可以把声明的计数器变量限制在循环内部。")]),n._v(" "),e("p",[n._v("作用域链：\n在当前作用域中查找所需变量，但是该作用域没有这个变量，那这个变量就是自由变量。如果在自己作用域找不到该变量就去父级作用域查找，依次向上级作用域查找，直到访问到window对象就被终止，这一层层的关系就是作用域链。\n作用域链的作用是保证对执行环境有权访问的所有变量和函数的有序访问，通过作用域链，可以访问到外层环境的变量和函数。\n作用域链的本质上是一个指向变量对象的指针列表。变量对象是一个包含了执行环境中所有变量和函数的对象。作用域链的前端始终都是当前执行上下文的变量对象。全局执行上下文的变量对象（也就是全局对象）始终是作用域链的最后一个对象。\n当查找一个变量时，如果当前执行环境中没有找到，可以沿着作用域链向后查找。")]),n._v(" "),e("h2",{attrs:{id:"_3-对执行上下文的理解"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-对执行上下文的理解"}},[n._v("#")]),n._v(" 3. 对执行上下文的理解")]),n._v(" "),e("ol",[e("li",[n._v("执行上下文类型\n（1）全局执行上下文\n任何不在函数内部的都是全局执行上下文，它首先会创建一个全局的window对象，并且设置this的值等于这个全局对象，一个程序中只有一个全局执行上下文。\n（2）函数执行上下文\n当一个函数被调用时，就会为该函数创建一个新的执行上下文，函数的上下文可以有任意多个。\n（3）eval函数执行上下文\n执行在eval函数中的代码会有属于他自己的执行上下文，不过eval函数不常使用，不做介绍。")]),n._v(" "),e("li",[n._v("执行上下文栈")])]),n._v(" "),e("p",[n._v("JavaScript引擎使用执行上下文栈来管理执行上下文\n当JavaScript执行代码时，首先遇到全局代码，会创建一个全局执行上下文并且压入执行栈中，每当遇到一个函数调用，就会为该函数创建一个新的执行上下文并压入栈顶，引擎会执行位于执行上下文栈顶的函数，当函数执行完成之后，执行上下文从栈中弹出，继续执行下一个上下文。当所有的代码都执行完毕之后，从栈中弹出全局执行上下文。")]),n._v(" "),e("p",[n._v("let a = 'Hello World!';\nfunction first() {\nconsole.log('Inside first function');\nsecond();\nconsole.log('Again inside first function');\n}\nfunction second() {\nconsole.log('Inside second function');\n}\nfirst();\n//执行顺序\n//先执行second(),在执行first()\n复制代码\n3. 创建执行上下文\n创建执行上下文有两个阶段：创建阶段和执行阶段\n1）创建阶段\n（1）this绑定")]),n._v(" "),e("p",[n._v("在全局执行上下文中，this指向全局对象（window对象）\n在函数执行上下文中，this指向取决于函数如何调用。如果它被一个引用对象调用，那么 this 会被设置成那个对象，否则 this 的值被设置为全局对象或者 undefined")]),n._v(" "),e("p",[n._v("（2）创建词法环境组件")]),n._v(" "),e("p",[n._v("词法环境是一种有标识符——变量映射的数据结构，标识符是指变量/函数名，变量是对实际对象或原始数据的引用。\n词法环境的内部有两个组件：加粗样式：环境记录器:用来储存变量个函数声明的实际位置外部环境的引用：可以访问父级作用域")]),n._v(" "),e("p",[n._v("（3）创建变量环境组件")]),n._v(" "),e("p",[n._v("变量环境也是一个词法环境，其环境记录器持有变量声明语句在执行上下文中创建的绑定关系。")]),n._v(" "),e("p",[n._v("2）执行阶段\n此阶段会完成对变量的分配，最后执行完代码。\n简单来说执行上下文就是指：\n在执行一点JS代码之前，需要先解析代码。解析的时候会先创建一个全局执行上下文环境，先把代码中即将执行的变量、函数声明都拿出来，变量先赋值为undefined，函数先声明好可使用。这一步执行完了，才开始正式的执行程序。\n在一个函数执行之前，也会创建一个函数执行上下文环境，跟全局执行上下文类似，不过函数执行上下文会多出this、arguments和函数的参数。")]),n._v(" "),e("p",[n._v("全局上下文：变量定义，函数声明\n函数上下文：变量定义，函数声明，this，arguments")]),n._v(" "),e("h1",{attrs:{id:"六、this-call-apply-bind"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#六、this-call-apply-bind"}},[n._v("#")]),n._v(" 六、this/call/apply/bind")]),n._v(" "),e("h2",{attrs:{id:"_1-对this对象的理解"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-对this对象的理解"}},[n._v("#")]),n._v(" 1. 对this对象的理解")]),n._v(" "),e("p",[n._v("this 是执行上下文中的一个属性，它指向最后一次调用这个方法的对象。在实际开发中，this 的指向可以通过四种调用模式来判断。")]),n._v(" "),e("p",[n._v("第一种是函数调用模式，当一个函数不是一个对象的属性时，直接作为函数来调用时，this 指向全局对象。\n第二种是方法调用模式，如果一个函数作为一个对象的方法来调用时，this 指向这个对象。\n第三种是构造器调用模式，如果一个函数用 new 调用时，函数执行前会新创建一个对象，this 指向这个新创建的对象。\n第四种是 apply 、 call 和 bind 调用模式，这三个方法都可以显示的指定调用函数的 this 指向。其中 apply 方法接收两个参数：一个是 this 绑定的对象，一个是参数数组。call 方法接收的参数，第一个是 this 绑定的对象，后面的其余参数是传入函数执行的参数。也就是说，在使用 call() 方法时，传递给函数的参数必须逐个列举出来。bind 方法通过传入一个对象，返回一个 this 绑定了传入对象的新函数。这个函数的 this 指向除了使用 new 时会被改变，其他情况下都不会改变。")]),n._v(" "),e("p",[n._v("这四种方式，使用构造器调用模式的优先级最高，然后是 apply、call 和 bind 调用模式，然后是方法调用模式，然后是函数调用模式。")]),n._v(" "),e("h2",{attrs:{id:"_2-call-和-apply-的区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-call-和-apply-的区别"}},[n._v("#")]),n._v(" 2. call() 和 apply() 的区别？")]),n._v(" "),e("p",[n._v("它们的作用一模一样，区别仅在于传入参数的形式的不同。")]),n._v(" "),e("p",[n._v("apply 接受两个参数，第一个参数指定了函数体内 this 对象的指向，第二个参数为一个带下标的集合，这个集合可以为数组，也可以为类数组，apply 方法把这个集合中的元素作为参数传递给被调用的函数。\ncall 传入的参数数量不固定，跟 apply 相同的是，第一个参数也是代表函数体内的 this 指向，从第二个参数开始往后，每个参数被依次传入函数。")]),n._v(" "),e("h2",{attrs:{id:"_3-实现call、apply-及-bind-函数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-实现call、apply-及-bind-函数"}},[n._v("#")]),n._v(" 3. 实现call、apply 及 bind 函数")]),n._v(" "),e("p",[n._v("（1）call 函数的实现步骤：")]),n._v(" "),e("p",[n._v("判断调用对象是否为函数，即使是定义在函数的原型上的，但是可能出现使用 call 等方式调用的情况。\n判断传入上下文对象是否存在，如果不存在，则设置为 window 。\n处理传入的参数，截取第一个参数后的所有参数。\n将函数作为上下文对象的一个属性。\n使用上下文对象来调用这个方法，并保存返回结果。\n删除刚才新增的属性。\n返回结果。")]),n._v(" "),e("p",[n._v('Function.prototype.myCall = function(context) {\n// 判断调用对象\nif (typeof this !== "function") {\nconsole.error("type error");\n}\n// 获取参数\nlet args = [...arguments].slice(1),\nresult = null;\n// 判断 context 是否传入，如果未传入则设置为 window\ncontext = context || window;\n// 将调用函数设为对象的方法\ncontext.fn = this;\n// 调用函数\nresult = context.fn(...args);\n// 将属性删除\ndelete context.fn;\nreturn result;\n};\n复制代码\n（2）apply 函数的实现步骤：')]),n._v(" "),e("p",[n._v("判断调用对象是否为函数，即使是定义在函数的原型上的，但是可能出现使用 call 等方式调用的情况。\n判断传入上下文对象是否存在，如果不存在，则设置为 window 。\n将函数作为上下文对象的一个属性。\n判断参数值是否传入\n使用上下文对象来调用这个方法，并保存返回结果。\n删除刚才新增的属性\n返回结果")]),n._v(" "),e("p",[n._v('Function.prototype.myApply = function(context) {\n// 判断调用对象是否为函数\nif (typeof this !== "function") {\nthrow new TypeError("Error");\n}\nlet result = null;\n// 判断 context 是否存在，如果未传入则为 window\ncontext = context || window;\n// 将函数设为对象的方法\ncontext.fn = this;\n// 调用方法\nif (arguments[1]) {\nresult = context.fn(...arguments[1]);\n} else {\nresult = context.fn();\n}\n// 将属性删除\ndelete context.fn;\nreturn result;\n};\n复制代码\n（3）bind 函数的实现步骤：')]),n._v(" "),e("p",[n._v("判断调用对象是否为函数，即使是定义在函数的原型上的，但是可能出现使用 call 等方式调用的情况。\n保存当前函数的引用，获取其余传入参数值。\n创建一个函数返回\n函数内部使用 apply 来绑定函数调用，需要判断函数作为构造函数的情况，这个时候需要传入当前函数的 this 给 apply 调用，其余情况都传入指定的上下文对象。")]),n._v(" "),e("p",[n._v('Function.prototype.myBind = function(context) {\n// 判断调用对象是否为函数\nif (typeof this !== "function") {\nthrow new TypeError("Error");\n}\n// 获取参数\nvar args = [...arguments].slice(1),\nfn = this;\nreturn function Fn() {\n// 根据调用方式，传入不同绑定值\nreturn fn.apply(\nthis instanceof Fn ? this : context,\nargs.concat(...arguments)\n);\n};\n};\n复制代码')]),n._v(" "),e("h1",{attrs:{id:"七、异步编程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#七、异步编程"}},[n._v("#")]),n._v(" 七、异步编程")]),n._v(" "),e("h2",{attrs:{id:"_1-异步编程的实现方式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-异步编程的实现方式"}},[n._v("#")]),n._v(" 1. 异步编程的实现方式？")]),n._v(" "),e("p",[n._v("JavaScript中的异步机制可以分为以下几种：")]),n._v(" "),e("p",[n._v("回调函数 的方式，使用回调函数的方式有一个缺点是，多个回调函数嵌套的时候会造成回调函数地狱，上下两层的回调函数间的代码耦合度太高，不利于代码的可维护。\nPromise 的方式，使用 Promise 的方式可以将嵌套的回调函数作为链式调用。但是使用这种方法，有时会造成多个 then 的链式调用，可能会造成代码的语义不够明确。\ngenerator 的方式，它可以在函数的执行过程中，将函数的执行权转移出去，在函数外部还可以将执行权转移回来。当遇到异步函数执行的时候，将函数执行权转移出去，当异步函数执行完毕时再将执行权给转移回来。因此在 generator 内部对于异步操作的方式，可以以同步的顺序来书写。使用这种方式需要考虑的问题是何时将函数的控制权转移回来，因此需要有一个自动执行 generator 的机制，比如说 co 模块等方式来实现 generator 的自动执行。\nasync 函数 的方式，async 函数是 generator 和 promise 实现的一个自动执行的语法糖，它内部自带执行器，当函数内部执行到一个 await 语句的时候，如果语句返回一个 promise 对象，那么函数将会等待 promise 对象的状态变为 resolve 后再继续向下执行。因此可以将异步逻辑，转化为同步的顺序来书写，并且这个函数可以自动执行。")]),n._v(" "),e("h2",{attrs:{id:"_2-settimeout、promise、async-await-的区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-settimeout、promise、async-await-的区别"}},[n._v("#")]),n._v(" 2. setTimeout、Promise、Async/Await 的区别")]),n._v(" "),e("p",[n._v("（1）setTimeout\nconsole.log('script start')\t//1. 打印 script start\nsetTimeout(function(){\nconsole.log('settimeout')\t// 4. 打印 settimeout\n})\t// 2. 调用 setTimeout 函数，并定义其完成后执行的回调函数\nconsole.log('script end')\t//3. 打印 script start\n// 输出顺序：script start->script end->settimeout\n复制代码\n（2）Promise\nPromise本身是同步的立即执行函数， 当在executor中执行resolve或者reject的时候, 此时是异步操作， 会先执行then/catch等，当主栈完成后，才会去调用resolve/reject中存放的方法执行，打印p的时候，是打印的返回结果，一个Promise实例。\nconsole.log('script start')\nlet promise1 = new Promise(function (resolve) {\nconsole.log('promise1')\nresolve()\nconsole.log('promise1 end')\n}).then(function () {\nconsole.log('promise2')\n})\nsetTimeout(function(){\nconsole.log('settimeout')\n})\nconsole.log('script end')\n// 输出顺序: script start->promise1->promise1 end->script end->promise2->settimeout\n复制代码\n当JS主线程执行到Promise对象时：")]),n._v(" "),e("p",[n._v("promise1.then() 的回调就是一个 task\npromise1 是 resolved或rejected: 那这个 task 就会放入当前事件循环回合的 microtask queue\npromise1 是 pending: 这个 task 就会放入 事件循环的未来的某个(可能下一个)回合的 microtask queue 中\nsetTimeout 的回调也是个 task ，它会被放入 macrotask queue 即使是 0ms 的情况")]),n._v(" "),e("p",[n._v("（3）async/await\nasync function async1(){\nconsole.log('async1 start');\nawait async2();\nconsole.log('async1 end')\n}\nasync function async2(){\nconsole.log('async2')\n}\nconsole.log('script start');\nasync1();\nconsole.log('script end')\n// 输出顺序：script start->async1 start->async2->script end->async1 end\n复制代码\nasync 函数返回一个 Promise 对象，当函数执行的时候，一旦遇到 await 就会先返回，等到触发的异步操作完成，再执行函数体内后面的语句。可以理解为，是让出了线程，跳出了 async 函数体。\n例如：\nasync function func1() {\nreturn 1\n}\nconsole.log(func1())\n复制代码")]),n._v(" "),e("p",[n._v("func1的运行结果其实就是一个Promise对象。因此也可以使用then来处理后续逻辑。\nfunc1().then(res => {\nconsole.log(res);  // 30\n})\n复制代码\nawait的含义为等待，也就是 async 函数需要等待await后的函数执行完成并且有了返回结果（Promise对象）之后，才能继续执行下面的代码。await通过返回一个Promise对象来实现同步的效果。")]),n._v(" "),e("h2",{attrs:{id:"_3-对promise的理解"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-对promise的理解"}},[n._v("#")]),n._v(" 3. 对Promise的理解")]),n._v(" "),e("p",[n._v("Promise是异步编程的一种解决方案，它是一个对象，可以获取异步操作的消息，他的出现大大改善了异步编程的困境，避免了地狱回调，它比传统的解决方案回调函数和事件更合理和更强大。\n所谓Promise，简单说就是一个容器，里面保存着某个未来才会结束的事件（通常是一个异步操作）的结果。从语法上说，Promise 是一个对象，从它可以获取异步操作的消息。Promise 提供统一的 API，各种异步操作都可以用同样的方法进行处理。\n（1）Promise的实例有三个状态:")]),n._v(" "),e("p",[n._v("Pending（进行中）\nResolved（已完成）\nRejected（已拒绝）")]),n._v(" "),e("p",[n._v("当把一件事情交给promise时，它的状态就是Pending，任务完成了状态就变成了Resolved、没有完成失败了就变成了Rejected。\n（2）Promise的实例有两个过程：")]),n._v(" "),e("p",[n._v("pending -> fulfilled : Resolved（已完成）\npending -> rejected：Rejected（已拒绝）")]),n._v(" "),e("p",[n._v("注意：一旦从进行状态变成为其他状态就永远不能更改状态了。\nPromise的特点：")]),n._v(" "),e("p",[n._v("对象的状态不受外界影响。promise对象代表一个异步操作，有三种状态，pending（进行中）、fulfilled（已成功）、rejected（已失败）。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态，这也是promise这个名字的由来——“承诺”；\n一旦状态改变就不会再变，任何时候都可以得到这个结果。promise对象的状态改变，只有两种可能：从pending变为fulfilled，从pending变为rejected。这时就称为resolved（已定型）。如果改变已经发生了，你再对promise对象添加回调函数，也会立即得到这个结果。这与事件（event）完全不同，事件的特点是：如果你错过了它，再去监听是得不到结果的。")]),n._v(" "),e("p",[n._v("Promise的缺点：")]),n._v(" "),e("p",[n._v("无法取消Promise，一旦新建它就会立即执行，无法中途取消。\n如果不设置回调函数，Promise内部抛出的错误，不会反应到外部。\n当处于pending状态时，无法得知目前进展到哪一个阶段（刚刚开始还是即将完成）。")]),n._v(" "),e("p",[n._v("总结：\nPromise 对象是异步编程的一种解决方案，最早由社区提出。Promise 是一个构造函数，接收一个函数作为参数，返回一个 Promise 实例。一个 Promise 实例有三种状态，分别是pending、resolved 和 rejected，分别代表了进行中、已成功和已失败。实例的状态只能由 pending 转变 resolved 或者rejected 状态，并且状态一经改变，就凝固了，无法再被改变了。\n状态的改变是通过 resolve() 和 reject() 函数来实现的，可以在异步操作结束后调用这两个函数改变 Promise 实例的状态，它的原型上定义了一个 then 方法，使用这个 then 方法可以为两个状态的改变注册回调函数。这个回调函数属于微任务，会在本轮事件循环的末尾执行。\n注意： 在构造 Promise 的时候，构造函数内部的代码是立即执行的")]),n._v(" "),e("h2",{attrs:{id:"_4-promise的基本用法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-promise的基本用法"}},[n._v("#")]),n._v(" 4. Promise的基本用法")]),n._v(" "),e("p",[n._v("（1）创建Promise对象\nPromise对象代表一个异步操作，有三种状态：pending（进行中）、fulfilled（已成功）和rejected（已失败）。\nPromise构造函数接受一个函数作为参数，该函数的两个参数分别是resolve和reject。\nconst promise = new Promise(function(resolve, reject) {\n// ... some code\nif (/* 异步操作成功 */){\nresolve(value);\n} else {\nreject(error);\n}\n});\n复制代码\n一般情况下都会使用new Promise()来创建promise对象，但是也可以使用promise.resolve和promise.reject这两个方法：")]),n._v(" "),e("p",[n._v("Promise.resolve")]),n._v(" "),e("p",[n._v("Promise.resolve(value)的返回值也是一个promise对象，可以对返回值进行.then调用，代码如下：\nPromise.resolve(11).then(function(value){\nconsole.log(value); // 打印出11\n});\n复制代码\nresolve(11)代码中，会让promise对象进入确定(resolve状态)，并将参数11传递给后面的then所指定的onFulfilled 函数；\n创建promise对象可以使用new Promise的形式创建对象，也可以使用Promise.resolve(value)的形式创建promise对象；")]),n._v(" "),e("p",[n._v("Promise.reject")]),n._v(" "),e("p",[n._v('Promise.reject 也是new Promise的快捷形式，也创建一个promise对象。代码如下：\nPromise.reject(new Error(“我错了，请原谅俺！！”));\n复制代码\n就是下面的代码new Promise的简单形式：\nnew Promise(function(resolve,reject){\nreject(new Error("我错了！"));\n});\n复制代码\n下面是使用resolve方法和reject方法：\nfunction testPromise(ready) {\nreturn new Promise(function(resolve,reject){\nif(ready) {\nresolve("hello world");\n}else {\nreject("No thanks");\n}\n});\n};\n// 方法调用\ntestPromise(true).then(function(msg){\nconsole.log(msg);\n},function(error){\nconsole.log(error);\n});\n复制代码\n上面的代码的含义是给testPromise方法传递一个参数，返回一个promise对象，如果为true的话，那么调用promise对象中的resolve()方法，并且把其中的参数传递给后面的then第一个函数内，因此打印出 “hello world”, 如果为false的话，会调用promise对象中的reject()方法，则会进入then的第二个函数内，会打印No thanks；\n（2）Promise方法\nPromise有五个常用的方法：then()、catch()、all()、race()、finally。下面就来看一下这些方法。')]),n._v(" "),e("p",[n._v("then()")]),n._v(" "),e("p",[n._v("当Promise执行的内容符合成功条件时，调用resolve函数，失败就调用reject函数。Promise创建完了，那该如何调用呢？\npromise.then(function(value) {\n// success\n}, function(error) {\n// failure\n});\n复制代码\nthen方法可以接受两个回调函数作为参数。第一个回调函数是Promise对象的状态变为resolved时调用，第二个回调函数是Promise对象的状态变为rejected时调用。其中第二个参数可以省略。\nthen方法返回的是一个新的Promise实例（不是原来那个Promise实例）。因此可以采用链式写法，即then方法后面再调用另一个then方法。\n当要写有顺序的异步事件时，需要串行时，可以这样写：\nlet promise = new Promise((resolve,reject)=>{\najax('first').success(function(res){\nresolve(res);\n})\n})\npromise.then(res=>{\nreturn new Promise((resovle,reject)=>{\najax('second').success(function(res){\nresolve(res)\n})\n})\n}).then(res=>{\nreturn new Promise((resovle,reject)=>{\najax('second').success(function(res){\nresolve(res)\n})\n})\n}).then(res=>{")]),n._v(" "),e("p",[n._v("})\n复制代码\n那当要写的事件没有顺序或者关系时，还如何写呢？可以使用all 方法来解决。\n2. catch()\nPromise对象除了有then方法，还有一个catch方法，该方法相当于then方法的第二个参数，指向reject的回调函数。不过catch方法还有一个作用，就是在执行resolve回调函数时，如果出现错误，抛出异常，不会停止运行，而是进入catch方法中。\np.then((data) => {\nconsole.log('resolved',data);\n},(err) => {\nconsole.log('rejected',err);\n}\n);\np.then((data) => {\nconsole.log('resolved',data);\n}).catch((err) => {\nconsole.log('rejected',err);\n});\n复制代码\n3. all()\nall方法可以完成并行任务， 它接收一个数组，数组的每一项都是一个promise对象。当数组中所有的promise的状态都达到resolved的时候，all方法的状态就会变成resolved，如果有一个状态变成了rejected，那么all方法的状态就会变成rejected。\njavascript\nlet promise1 = new Promise((resolve,reject)=>{\nsetTimeout(()=>{\nresolve(1);\n},2000)\n});\nlet promise2 = new Promise((resolve,reject)=>{\nsetTimeout(()=>{\nresolve(2);\n},1000)\n});\nlet promise3 = new Promise((resolve,reject)=>{\nsetTimeout(()=>{\nresolve(3);\n},3000)\n});\nPromise.all([promise1,promise2,promise3]).then(res=>{\nconsole.log(res);\n//结果为：[1,2,3]\n})\n复制代码\n调用all方法时的结果成功的时候是回调函数的参数也是一个数组，这个数组按顺序保存着每一个promise对象resolve执行时的值。\n（4）race()\nrace方法和all一样，接受的参数是一个每项都是promise的数组，但是与all不同的是，当最先执行完的事件执行完之后，就直接返回该promise对象的值。如果第一个promise对象状态变成resolved，那自身的状态变成了resolved；反之第一个promise变成rejected，那自身状态就会变成rejected。\nlet promise1 = new Promise((resolve,reject)=>{\nsetTimeout(()=>{\nreject(1);\n},2000)\n});\nlet promise2 = new Promise((resolve,reject)=>{\nsetTimeout(()=>{\nresolve(2);\n},1000)\n});\nlet promise3 = new Promise((resolve,reject)=>{\nsetTimeout(()=>{\nresolve(3);\n},3000)\n});\nPromise.race([promise1,promise2,promise3]).then(res=>{\nconsole.log(res);\n//结果：2\n},rej=>{\nconsole.log(rej)};\n)\n复制代码\n那么race方法有什么实际作用呢？当要做一件事，超过多长时间就不做了，可以用这个方法来解决：\nPromise.race([promise1,timeOutPromise(5000)]).then(res=>{})\n复制代码\n5. finally()\nfinally方法用于指定不管 Promise 对象最后状态如何，都会执行的操作。该方法是 ES2018 引入标准的。\npromise\n.then(result => {···})\n.catch(error => {···})\n.finally(() => {···});\n复制代码\n上面代码中，不管promise最后的状态，在执行完then或catch指定的回调函数以后，都会执行finally方法指定的回调函数。\n下面是一个例子，服务器使用 Promise 处理请求，然后使用finally方法关掉服务器。\nserver.listen(port)\n.then(function () {\n// ...\n})\n.finally(server.stop);\n复制代码\nfinally方法的回调函数不接受任何参数，这意味着没有办法知道，前面的 Promise 状态到底是fulfilled还是rejected。这表明，finally方法里面的操作，应该是与状态无关的，不依赖于 Promise 的执行结果。finally本质上是then方法的特例：\npromise\n.finally(() => {\n// 语句\n});\n// 等同于\npromise\n.then(\nresult => {\n// 语句\nreturn result;\n},\nerror => {\n// 语句\nthrow error;\n}\n);\n复制代码\n上面代码中，如果不使用finally方法，同样的语句需要为成功和失败两种情况各写一次。有了finally方法，则只需要写一次。")]),n._v(" "),e("h2",{attrs:{id:"_5-promise解决了什么问题"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-promise解决了什么问题"}},[n._v("#")]),n._v(" 5. Promise解决了什么问题")]),n._v(" "),e("p",[n._v("在工作中经常会碰到这样一个需求，比如我使用ajax发一个A请求后，成功后拿到数据，需要把数据传给B请求；那么需要如下编写代码：\nlet fs = require('fs')\nfs.readFile('./a.txt','utf8',function(err,data){\nfs.readFile(data,'utf8',function(err,data){\nfs.readFile(data,'utf8',function(err,data){\nconsole.log(data)\n})\n})\n})\n复制代码\n上面的代码有如下缺点：")]),n._v(" "),e("p",[n._v("后一个请求需要依赖于前一个请求成功后，将数据往下传递，会导致多个ajax请求嵌套的情况，代码不够直观。\n如果前后两个请求不需要传递参数的情况下，那么后一个请求也需要前一个请求成功后再执行下一步操作，这种情况下，那么也需要如上编写代码，导致代码不够直观。")]),n._v(" "),e("p",[n._v("Promise出现之后，代码变成这样：\nlet fs = require('fs')\nfunction read(url){\nreturn new Promise((resolve,reject)=>{\nfs.readFile(url,'utf8',function(error,data){\nerror && reject(error)\nresolve(data)\n})\n})\n}\nread('./a.txt').then(data=>{\nreturn read(data)\n}).then(data=>{\nreturn read(data)"),e("br"),n._v("\n}).then(data=>{\nconsole.log(data)\n})\n复制代码\n这样代码看起了就简洁了很多，解决了地狱回调的问题。")]),n._v(" "),e("h2",{attrs:{id:"_6-promise-all和promise-race的区别的使用场景"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6-promise-all和promise-race的区别的使用场景"}},[n._v("#")]),n._v(" 6. Promise.all和Promise.race的区别的使用场景")]),n._v(" "),e("p",[n._v("（1）Promise.all\nPromise.all可以将多个Promise实例包装成一个新的Promise实例。同时，成功和失败的返回值是不同的，成功的时候返回的是一个结果数组，而失败的时候则返回最先被reject失败状态的值。\nPromise.all中传入的是数组，返回的也是是数组，并且会将进行映射，传入的promise对象返回的值是按照顺序在数组中排列的，但是注意的是他们执行的顺序并不是按照顺序的，除非可迭代对象为空。\n需要注意，Promise.all获得的成功结果的数组里面的数据顺序和Promise.all接收到的数组顺序是一致的，这样当遇到发送多个请求并根据请求顺序获取和使用数据的场景，就可以使用Promise.all来解决。\n（2）Promise.race\n顾名思义，Promse.race就是赛跑的意思，意思就是说，Promise.race([p1, p2, p3])里面哪个结果获得的快，就返回那个结果，不管结果本身是成功状态还是失败状态。当要做一件事，超过多长时间就不做了，可以用这个方法来解决：\nPromise.race([promise1,timeOutPromise(5000)]).then(res=>{})\n复制代码")]),n._v(" "),e("h2",{attrs:{id:"_7-对async-await-的理解"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_7-对async-await-的理解"}},[n._v("#")]),n._v(" 7.  对async/await 的理解")]),n._v(" "),e("p",[n._v("async/await其实是Generator 的语法糖，它能实现的效果都能用then链来实现，它是为优化then链而开发出来的。从字面上来看，async是“异步”的简写，await则为等待，所以很好理解async 用于申明一个 function 是异步的，而 await 用于等待一个异步方法执行完成。当然语法上强制规定await只能出现在asnyc函数中，先来看看async函数返回了什么：\nasync function testAsy(){\nreturn 'hello world';\n}\nlet result = testAsy();\nconsole.log(result)\n复制代码")]),n._v(" "),e("p",[n._v("所以，async 函数返回的是一个 Promise 对象。async 函数（包含函数语句、函数表达式、Lambda表达式）会返回一个 Promise 对象，如果在函数中 return 一个直接量，async 会把这个直接量通过 Promise.resolve() 封装成 Promise 对象。\nasync 函数返回的是一个 Promise 对象，所以在最外层不能用 await 获取其返回值的情况下，当然应该用原来的方式：then() 链来处理这个 Promise 对象，就像这样：\nasync function testAsy(){\nreturn 'hello world'\n}\nlet result = testAsy()\nconsole.log(result)\nresult.then(v=>{\nconsole.log(v)   // hello world\n})\n复制代码\n那如果 async 函数没有返回值，又该如何？很容易想到，它会返回 Promise.resolve(undefined)。\n联想一下 Promise 的特点——无等待，所以在没有 await 的情况下执行 async 函数，它会立即执行，返回一个 Promise 对象，并且，绝不会阻塞后面的语句。这和普通返回 Promise 对象的函数并无二致。\n注意：Promise.resolve(x) 可以看作是 new Promise(resolve => resolve(x)) 的简写，可以用于快速封装字面量对象或其他对象，将其封装成 Promise 实例。")]),n._v(" "),e("h2",{attrs:{id:"_8-await-到底在等啥"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_8-await-到底在等啥"}},[n._v("#")]),n._v(" 8. await 到底在等啥？")]),n._v(" "),e("p",[n._v('await 在等待什么呢？ 一般来说，都认为 await 是在等待一个 async 函数完成。不过按语法说明，await 等待的是一个表达式，这个表达式的计算结果是 Promise 对象或者其它值（换句话说，就是没有特殊限定）。\n因为 async 函数返回一个 Promise 对象，所以 await 可以用于等待一个 async 函数的返回值——这也可以说是 await 在等 async 函数，但要清楚，它等的实际是一个返回值。注意到 await 不仅仅用于等 Promise 对象，它可以等任意表达式的结果，所以，await 后面实际是可以接普通函数调用或者直接量的。所以下面这个示例完全可以正确运行：\nfunction getSomething() {\nreturn "something";\n}\nasync function testAsync() {\nreturn Promise.resolve("hello async");\n}\nasync function test() {\nconst v1 = await getSomething();\nconst v2 = await testAsync();\nconsole.log(v1, v2);\n}\ntest();\n复制代码\nawait 表达式的运算结果取决于它等的是什么。')]),n._v(" "),e("p",[n._v("如果它等到的不是一个 Promise 对象，那 await 表达式的运算结果就是它等到的东西。\n如果它等到的是一个 Promise 对象，await 就忙起来了，它会阻塞后面的代码，等着 Promise 对象 resolve，然后得到 resolve 的值，作为 await 表达式的运算结果。")]),n._v(" "),e("p",[n._v("来看一个例子：\nfunction testAsy(x){\nreturn new Promise(resolve=>{setTimeout(() => {\nresolve(x);\n}, 3000)\n}\n)\n}\nasync function testAwt(){"),e("br"),n._v("\nlet result =  await testAsy('hello world');\nconsole.log(result);    // 3秒钟之后出现hello world\nconsole.log('cuger')   // 3秒钟之后出现cug\n}\ntestAwt();\nconsole.log('cug')  //立即输出cug\n复制代码\n这就是 await 必须用在 async 函数中的原因。async 函数调用不会造成阻塞，它内部所有的阻塞都被封装在一个 Promise 对象中异步执行。await暂停当前async的执行，所以'cug''最先输出，hello world'和‘cuger’是3秒钟后同时出现的。")]),n._v(" "),e("h2",{attrs:{id:"_9-async-await的优势"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_9-async-await的优势"}},[n._v("#")]),n._v(" 9.  async/await的优势")]),n._v(" "),e("p",[n._v("单一的 Promise 链并不能发现 async/await 的优势，但是，如果需要处理由多个 Promise 组成的 then 链的时候，优势就能体现出来了（很有意思，Promise 通过 then 链来解决多层回调的问题，现在又用 async/await 来进一步优化它）。\n假设一个业务，分多个步骤完成，每个步骤都是异步的，而且依赖于上一个步骤的结果。仍然用 setTimeout 来模拟异步操作：\n/**")]),n._v(" "),e("ul",[e("li",[n._v("传入参数 n，表示这个函数执行的时间（毫秒）")]),n._v(" "),e("li",[n._v("执行的结果是 n + 200，这个值将用于下一步骤\n*/\nfunction takeLongTime(n) {\nreturn new Promise(resolve => {\nsetTimeout(() => resolve(n + 200), n);\n});\n}\nfunction step1(n) {\nconsole.log("),e("code",[n._v("step1 with ${n}")]),n._v(");\nreturn takeLongTime(n);\n}\nfunction step2(n) {\nconsole.log("),e("code",[n._v("step2 with ${n}")]),n._v(");\nreturn takeLongTime(n);\n}\nfunction step3(n) {\nconsole.log("),e("code",[n._v("step3 with ${n}")]),n._v(');\nreturn takeLongTime(n);\n}\n复制代码\n现在用 Promise 方式来实现这三个步骤的处理：\nfunction doIt() {\nconsole.time("doIt");\nconst time1 = 300;\nstep1(time1)\n.then(time2 => step2(time2))\n.then(time3 => step3(time3))\n.then(result => {\nconsole.log('),e("code",[n._v("result is ${result}")]),n._v(');\nconsole.timeEnd("doIt");\n});\n}\ndoIt();\n// c:\\var\\test>node --harmony_async_await .\n// step1 with 300\n// step2 with 500\n// step3 with 700\n// result is 900\n// doIt: 1507.251ms\n复制代码\n输出结果 result 是 step3() 的参数 700 + 200 = 900。doIt() 顺序执行了三个步骤，一共用了 300 + 500 + 700 = 1500 毫秒，和 console.time()/console.timeEnd() 计算的结果一致。\n如果用 async/await 来实现呢，会是这样：\nasync function doIt() {\nconsole.time("doIt");\nconst time1 = 300;\nconst time2 = await step1(time1);\nconst time3 = await step2(time2);\nconst result = await step3(time3);\nconsole.log('),e("code",[n._v("result is ${result}")]),n._v(');\nconsole.timeEnd("doIt");\n}\ndoIt();\n复制代码\n结果和之前的 Promise 实现是一样的，但是这个代码看起来是不是清晰得多，几乎跟同步代码一样')])]),n._v(" "),e("h2",{attrs:{id:"_10-async-await对比promise的优势"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_10-async-await对比promise的优势"}},[n._v("#")]),n._v(" 10. async/await对比Promise的优势")]),n._v(" "),e("p",[n._v("代码读起来更加同步，Promise虽然摆脱了回调地狱，但是then的链式调⽤也会带来额外的阅读负担\nPromise传递中间值⾮常麻烦，⽽async/await⼏乎是同步的写法，⾮常优雅\n错误处理友好，async/await可以⽤成熟的try/catch，Promise的错误捕获⾮常冗余\n调试友好，Promise的调试很差，由于没有代码块，你不能在⼀个返回表达式的箭头函数中设置断点，如果你在⼀个.then代码块中使⽤调试器的步进(step-over)功能，调试器并不会进⼊后续的.then代码块，因为调试器只能跟踪同步代码的每⼀步。")]),n._v(" "),e("h2",{attrs:{id:"_11-async-await-如何捕获异常"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_11-async-await-如何捕获异常"}},[n._v("#")]),n._v(" 11. async/await 如何捕获异常")]),n._v(" "),e("p",[n._v("async function fn(){\ntry{\nlet a = await Promise.reject('error')\n}catch(error){\nconsole.log(error)\n}\n}\n复制代码")]),n._v(" "),e("h1",{attrs:{id:"八、面向对象"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#八、面向对象"}},[n._v("#")]),n._v(" 八、面向对象")]),n._v(" "),e("h2",{attrs:{id:"_1-对象创建的方式有哪些"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-对象创建的方式有哪些"}},[n._v("#")]),n._v(" 1. 对象创建的方式有哪些？")]),n._v(" "),e("p",[n._v("一般使用字面量的形式直接创建对象，但是这种创建方式对于创建大量相似对象的时候，会产生大量的重复代码。但 js和一般的面向对象的语言不同，在 ES6 之前它没有类的概念。但是可以使用函数来进行模拟，从而产生出可复用的对象创建方式，常见的有以下几种：\n（1）第一种是工厂模式，工厂模式的主要工作原理是用函数来封装创建对象的细节，从而通过调用函数来达到复用的目的。但是它有一个很大的问题就是创建出来的对象无法和某个类型联系起来，它只是简单的封装了复用代码，而没有建立起对象和类型间的关系。\n（2）第二种是构造函数模式。js 中每一个函数都可以作为构造函数，只要一个函数是通过 new 来调用的，那么就可以把它称为构造函数。执行构造函数首先会创建一个对象，然后将对象的原型指向构造函数的 prototype 属性，然后将执行上下文中的 this 指向这个对象，最后再执行整个函数，如果返回值不是对象，则返回新建的对象。因为 this 的值指向了新建的对象，因此可以使用 this 给对象赋值。构造函数模式相对于工厂模式的优点是，所创建的对象和构造函数建立起了联系，因此可以通过原型来识别对象的类型。但是构造函数存在一个缺点就是，造成了不必要的函数对象的创建，因为在 js 中函数也是一个对象，因此如果对象属性中如果包含函数的话，那么每次都会新建一个函数对象，浪费了不必要的内存空间，因为函数是所有的实例都可以通用的。\n（3）第三种模式是原型模式，因为每一个函数都有一个 prototype 属性，这个属性是一个对象，它包含了通过构造函数创建的所有实例都能共享的属性和方法。因此可以使用原型对象来添加公用属性和方法，从而实现代码的复用。这种方式相对于构造函数模式来说，解决了函数对象的复用问题。但是这种模式也存在一些问题，一个是没有办法通过传入参数来初始化值，另一个是如果存在一个引用类型如 Array 这样的值，那么所有的实例将共享一个对象，一个实例对引用类型值的改变会影响所有的实例。\n（4）第四种模式是组合使用构造函数模式和原型模式，这是创建自定义类型的最常见方式。因为构造函数模式和原型模式分开使用都存在一些问题，因此可以组合使用这两种模式，通过构造函数来初始化对象的属性，通过原型对象来实现函数方法的复用。这种方法很好的解决了两种模式单独使用时的缺点，但是有一点不足的就是，因为使用了两种不同的模式，所以对于代码的封装性不够好。\n（5）第五种模式是动态原型模式，这一种模式将原型方法赋值的创建过程移动到了构造函数的内部，通过对属性是否存在的判断，可以实现仅在第一次调用函数时对原型对象赋值一次的效果。这一种方式很好地对上面的混合模式进行了封装。\n（6）第六种模式是寄生构造函数模式，这一种模式和工厂模式的实现基本相同，我对这个模式的理解是，它主要是基于一个已有的类型，在实例化时对实例化的对象进行扩展。这样既不用修改原来的构造函数，也达到了扩展对象的目的。它的一个缺点和工厂模式一样，无法实现对象的识别。")]),n._v(" "),e("h2",{attrs:{id:"_2-对象继承的方式有哪些"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-对象继承的方式有哪些"}},[n._v("#")]),n._v(" 2. 对象继承的方式有哪些？")]),n._v(" "),e("p",[n._v("（1）第一种是以原型链的方式来实现继承，但是这种实现方式存在的缺点是，在包含有引用类型的数据时，会被所有的实例对象所共享，容易造成修改的混乱。还有就是在创建子类型的时候不能向超类型传递参数。\n（2）第二种方式是使用借用构造函数的方式，这种方式是通过在子类型的函数中调用超类型的构造函数来实现的，这一种方法解决了不能向超类型传递参数的缺点，但是它存在的一个问题就是无法实现函数方法的复用，并且超类型原型定义的方法子类型也没有办法访问到。\n（3）第三种方式是组合继承，组合继承是将原型链和借用构造函数组合起来使用的一种方式。通过借用构造函数的方式来实现类型的属性的继承，通过将子类型的原型设置为超类型的实例来实现方法的继承。这种方式解决了上面的两种模式单独使用时的问题，但是由于我们是以超类型的实例来作为子类型的原型，所以调用了两次超类的构造函数，造成了子类型的原型中多了很多不必要的属性。\n（4）第四种方式是原型式继承，原型式继承的主要思路就是基于已有的对象来创建新的对象，实现的原理是，向函数中传入一个对象，然后返回一个以这个对象为原型的对象。这种继承的思路主要不是为了实现创造一种新的类型，只是对某个对象实现一种简单继承，ES5 中定义的 Object.create() 方法就是原型式继承的实现。缺点与原型链方式相同。\n（5）第五种方式是寄生式继承，寄生式继承的思路是创建一个用于封装继承过程的函数，通过传入一个对象，然后复制一个对象的副本，然后对象进行扩展，最后返回这个对象。这个扩展的过程就可以理解是一种继承。这种继承的优点就是对一个简单对象实现继承，如果这个对象不是自定义类型时。缺点是没有办法实现函数的复用。\n（6）第六种方式是寄生式组合继承，组合继承的缺点就是使用超类型的实例做为子类型的原型，导致添加了不必要的原型属性。寄生式组合继承的方式是使用超类型的原型的副本来作为子类型的原型，这样就避免了创建不必要的属性。")]),n._v(" "),e("h1",{attrs:{id:"九、垃圾回收与内存泄漏"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#九、垃圾回收与内存泄漏"}},[n._v("#")]),n._v(" 九、垃圾回收与内存泄漏")]),n._v(" "),e("h2",{attrs:{id:"_1-浏览器的垃圾回收机制"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-浏览器的垃圾回收机制"}},[n._v("#")]),n._v(" 1. 浏览器的垃圾回收机制")]),n._v(" "),e("p",[n._v("（1）垃圾回收的概念\n垃圾回收：JavaScript代码运行时，需要分配内存空间来储存变量和值。当变量不在参与运行时，就需要系统收回被占用的内存空间，这就是垃圾回收。\n回收机制：")]),n._v(" "),e("p",[n._v("Javascript 具有自动垃圾回收机制，会定期对那些不再使用的变量、对象所占用的内存进行释放，原理就是找到不再使用的变量，然后释放掉其占用的内存。\nJavaScript中存在两种变量：局部变量和全局变量。全局变量的生命周期会持续要页面卸载；而局部变量声明在函数中，它的生命周期从函数执行开始，直到函数执行结束，在这个过程中，局部变量会在堆或栈中存储它们的值，当函数执行结束后，这些局部变量不再被使用，它们所占有的空间就会被释放。\n不过，当局部变量被外部函数使用时，其中一种情况就是闭包，在函数执行结束后，函数外部的变量依然指向函数内部的局部变量，此时局部变量依然在被使用，所以不会回收。")]),n._v(" "),e("p",[n._v("（2）垃圾回收的方式\n浏览器通常使用的垃圾回收方法有两种：标记清除，引用计数。\n1）标记清除")]),n._v(" "),e("p",[n._v("标记清除是浏览器常见的垃圾回收方式，当变量进入执行环境时，就标记这个变量“进入环境”，被标记为“进入环境”的变量是不能被回收的，因为他们正在被使用。当变量离开环境时，就会被标记为“离开环境”，被标记为“离开环境”的变量会被内存释放。\n垃圾收集器在运行的时候会给存储在内存中的所有变量都加上标记。然后，它会去掉环境中的变量以及被环境中的变量引用的标记。而在此之后再被加上标记的变量将被视为准备删除的变量，原因是环境中的变量已经无法访问到这些变量了。最后。垃圾收集器完成内存清除工作，销毁那些带标记的值，并回收他们所占用的内存空间。")]),n._v(" "),e("p",[n._v("2）引用计数")]),n._v(" "),e("p",[n._v("另外一种垃圾回收机制就是引用计数，这个用的相对较少。引用计数就是跟踪记录每个值被引用的次数。当声明了一个变量并将一个引用类型赋值给该变量时，则这个值的引用次数就是1。相反，如果包含对这个值引用的变量又取得了另外一个值，则这个值的引用次数就减1。当这个引用次数变为0时，说明这个变量已经没有价值，因此，在在机回收期下次再运行时，这个变量所占有的内存空间就会被释放出来。\n这种方法会引起循环引用的问题：例如： obj1和obj2通过属性进行相互引用，两个对象的引用次数都是2。当使用循环计数时，由于函数执行完后，两个对象都离开作用域，函数执行结束，obj1和obj2还将会继续存在，因此它们的引用次数永远不会是0，就会引起循环引用。")]),n._v(" "),e("p",[n._v("function fun() {\nlet obj1 = {};\nlet obj2 = {};\nobj1.a = obj2; // obj1 引用 obj2\nobj2.a = obj1; // obj2 引用 obj1\n}\n复制代码\n这种情况下，就要手动释放变量占用的内存：\nobj1.a =  null\nobj2.a =  null\n复制代码\n（3）减少垃圾回收\n虽然浏览器可以进行垃圾自动回收，但是当代码比较复杂时，垃圾回收所带来的代价比较大，所以应该尽量减少垃圾回收。")]),n._v(" "),e("p",[n._v("对数组进行优化： 在清空一个数组时，最简单的方法就是给其赋值为[ ]，但是与此同时会创建一个新的空对象，可以将数组的长度设置为0，以此来达到清空数组的目的。\n对object进行优化： 对象尽量复用，对于不再使用的对象，就将其设置为null，尽快被回收。\n对函数进行优化： 在循环中的函数表达式，如果可以复用，尽量放在函数的外面。")]),n._v(" "),e("h2",{attrs:{id:"_2-哪些情况会导致内存泄漏"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-哪些情况会导致内存泄漏"}},[n._v("#")]),n._v(" 2. 哪些情况会导致内存泄漏")]),n._v(" "),e("p",[n._v("以下四种情况会造成内存的泄漏：")]),n._v(" "),e("p",[n._v("意外的全局变量： 由于使用未声明的变量，而意外的创建了一个全局变量，而使这个变量一直留在内存中无法被回收。\n被遗忘的计时器或回调函数： 设置了 setInterval 定时器，而忘记取消它，如果循环函数有对外部变量的引用的话，那么这个变量会被一直留在内存中，而无法被回收。\n脱离 DOM 的引用： 获取一个 DOM 元素的引用，而后面这个元素被删除，由于一直保留了对这个元素的引用，所以它也无法被回收。\n闭包： 不合理的使用闭包，从而导致某些变量一直被留在内存当中。")])])}),[],!1,null,null,null);e.default=s.exports}}]);